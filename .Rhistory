mat
mat[3,1]=0
mat
which(mat !=0, arr.ind = T)
which(dyad_vec[,1:2] ==c(1,2), arr.ind = T)
dyad_vec
mat
which(dyad_vec[,1:2] ==c(1,2))
which(dyad_vec[,1] ==1)
a = c(12,2)
a
append(a,4)
init = 3
N <- max(data)
n2 <- length(dyad_vec[,1])
wave0 <- sample(N,init)
dyad_ind <- c()
for(i in wave0){
dyad_ind <- append(dyad_ind, which(dyad_vec[,1] == i | dyad_vec[,2] == i))
}
dyad_ind
dyad_vec[dyad_ind,1:2]
unique(dyad_vec[dyad_ind,1:2])
c(dyad_vec[dyad_ind,1:2])
unique(c(dyad_vec[dyad_ind,1:2]))
a
b =2
setdiff(a,b)
setdiff(b,b)
setdiff(b,a)
wave1 <- setdiff(unique(c(dyad_vec[dyad_ind,1:2])),wave0)
wave1
wave0
wave <- list()
append(wave, wave0)
wave[1]<- wave0
wave
wave[[1]]<- wave0
wave
wave[[1]]
wave <- list()
n2 <- length(dyad_vec[,1])
wave[[1]] <- sample(N,init)
for(j in 1:w){
dyad_ind <- c()
for(i in wave[[j]]){
dyad_ind <- append(dyad_ind, which(dyad_vec[,1] == i | dyad_vec[,2] == i))
}
wave[[j+1]] <- setdiff(unique(c(dyad_vec[dyad_ind,1:2])),wave[[j]])
}
w = 2
for(j in 1:w){
dyad_ind <- c()
for(i in wave[[j]]){
dyad_ind <- append(dyad_ind, which(dyad_vec[,1] == i | dyad_vec[,2] == i))
}
wave[[j+1]] <- setdiff(unique(c(dyad_vec[dyad_ind,1:2])),wave[[j]])
}
wave
unlist(wave)
dyad_vec <- comp_dyad_mat(data)
if(!N){
N <- max(data)
}
wave <- list()
n2 <- length(dyad_vec[,1])
wave[[1]] <- sample(N,init)
for(j in 1:w){
dyad_ind <- c()
for(i in wave[[j]]){
dyad_ind <- append(dyad_ind, which(dyad_vec[,1] == i | dyad_vec[,2] == i))
}
wave[[j+1]] <- setdiff(unique(c(dyad_vec[dyad_ind,1:2])),unlist(wave))
}
wave
unlist(wave)
a = unlist(wave)
1 in a
1 %in% a
Lazega_lawyer_network
length(dyad_vec[1,])
wave
node_set <- unlist(wave)
iter <- 0
for(i in 1:n2){
if(dyad_vec[i,1] %in% node_set & dyad_vec[i,2] %in% node_set){
for(j in 3:length(dyad_vec[1,])]){
i=1
dyad_vec[i,1] %in% node_set
iter <- 0
for(i in 1:n2){
if(dyad_vec[i,1] %in% node_set & dyad_vec[i,2] %in% node_set){
for(j in 3:length(dyad_vec[1,])){
if(dyad_vec[i,j] == 1){
iter <- iter + 1
lt_samp[iter,1] <- dyad_vec[i,1]
lt_samp[iter,2] <- dyad_vec[i,2]
lt_samp[iter,3] <- j-2
}
}
}
}
node_set <- unlist(wave)
for(i in 1:n2){
if(dyad_vec[i,1] %in% node_set & dyad_vec[i,2] %in% node_set){
for(j in 3:length(dyad_vec[1,])){
if(dyad_vec[i,j] == 1){
lt_samp <- rbind(lt_samp,c(dyad_vec[i,1],dyad_vec[i,2],j-2))
}
}
}
}
lt_samp <- matrix(0,1,3)
for(i in 1:n2){
if(dyad_vec[i,1] %in% node_set & dyad_vec[i,2] %in% node_set){
for(j in 3:length(dyad_vec[1,])){
if(dyad_vec[i,j] == 1){
lt_samp <- rbind(lt_samp,c(dyad_vec[i,1],dyad_vec[i,2],j-2))
}
}
}
}
lt_samp
333+395
Lazega_lawyer_network
333+396
lt_samp[-1,]
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
link_tracing_samp()
Lazega_lawyer_network
set.seed(202412)
###########################
## Link tracing sampling ##
###########################
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
set.seed(202412)
samp1 <- link_tracing_samp()
samp1 <- link_tracing_samp(init = 2)
samp1 <- link_tracing_samp(init = 1)
samp1
set.seed(202412)
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 3, w = 2)
samp1
set.seed(202412)
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 1, w = 2)
samp
samp1
# compute the basis network of 2-wave link tracing samples of Lazega
unique_dyads <- unique(samp1[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
unique_dyads_vec
# compute the basis network of 2-wave link tracing samples of Lazega
unique_dyads <- unique(samp1[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
# estimate ERGM model parameters using MPLE.
data_res <- est_ml(NetMat = samp1, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)
seed <- 202412
# estimate ERGM model parameters using MPLE.
data_res <- est_ml(NetMat = samp1, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)
data_res
# obtain the estimated theta for Lazega network
data_theta <- data_res$theta_est
summary_est(data_res)
# m indicates the number of repetitions
simulated_suff <- simulate_suffstats_Lazega(data = samp1, m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
data_theta
data=samp1
m = 10
theta <- data_res$theta_est
theta
# the default theta is the MPLE of the Lazega network data
reproduced_suff <- matrix(0,m,7)
seeds <- sample(1:9999999,m,replace = FALSE)
sim_suff <- matrix(0,m, 7)
unique_dyads <- unique(data[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
iter=1
seed <- seeds[iter]
reproduced <- samp_ml(theta, N = 71, mdim = 6,
mterm = 'other',intv = 3, H = 2, seed = seeds[iter],
basis_arguments = unique_dyads_vec)
simsamp <- reproduced$suff_stats
simsamp
reproduced_suff
simsamp[,3]
devtools::document()
# m indicates the number of repetitions
simulated_suff <- simulate_suffstats_Lazega(data = samp1, m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
draw_box_plot_Lazega(simulated_suff, obs)
devtools::document()
draw_box_plot_Lazega(simulated_suff, obs)
devtools::document()
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega(data = samp1) # compute the observed sufficient statistics from the Lazega network.
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega(net_data = samp1) # compute the observed sufficient statistics from the Lazega network.
draw_box_plot_Lazega(simulated_suff, obs)
obs
devtools::document()
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega(net_data = samp1) # compute the observed sufficient statistics from the link tracing samples.
draw_box_plot_Lazega(simulated_suff, obs)
695/729
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 1, w = 1)
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 1, w = 1)
194/739
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 5, w = 1)
403/739
# compute the basis network of 2-wave link tracing samples of Lazega
unique_dyads <- unique(samp1[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
# estimate ERGM model parameters using MPLE.
data_res <- est_ml(NetMat = samp1, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)
summary_est(data_res)
# m indicates the number of repetitions
simulated_suff <- simulate_suffstats_Lazega(data = samp1, m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega(net_data = samp1) # compute the observed sufficient statistics from the link tracing samples.
draw_box_plot_Lazega(simulated_suff, obs)
###########################
## Link tracing sampling ##
###########################
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
set.seed(202412)
seed <- 202412
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 5, w = 1)
data = Lazega_lawyer_network
data[,1:2]
max(data[,1:2])
devtools::document()
set.seed(202412)
seed <- 202412
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 5, w = 1)
samp1
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 5, w = 2)
# compute the basis network of 2-wave link tracing samples of Lazega
unique_dyads <- unique(samp1[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
# estimate ERGM model parameters using MPLE.
data_res <- est_ml(NetMat = samp1, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)
# obtain the estimated theta for Lazega network
data_theta <- data_res$theta_est
summary_est(data_res)
length(samp1[,1])/length(Lazega_lawyer_network[,1])
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
set.seed(202412)
seed <- 202412
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 5, w = 1)
# compute the basis network of 2-wave link tracing samples of Lazega
unique_dyads <- unique(samp1[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
# estimate ERGM model parameters using MPLE.
data_res <- est_ml(NetMat = samp1, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)
# obtain the estimated theta for Lazega network
data_theta <- data_res$theta_est
summary_est(data_res)
# m indicates the number of repetitions
simulated_suff <- simulate_suffstats_Lazega(data = samp1, m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega(net_data = samp1) # compute the observed sufficient statistics from the link tracing samples.
draw_box_plot_Lazega(simulated_suff, obs)
length(samp1[,1])/length(Lazega_lawyer_network[,1])
samp1
## Examples of data analysis using the Lazega lawyer network data set
obs_all <- compute_suffstats_Lazega(Lazega_lawyer_network)
obs_all
## Examples of data analysis using the Lazega lawyer network data set
obs_all <- compute_suffstats_Lazega(Lazega_lawyer_network)
obs_in <- compute_suffstats_Lazega(net_data = samp1) # compute the observed sufficient statistics from the link tracing samples.
draw_box_plot_LT_samp <- function(reproduced_suff, obs_all,obs_in,obs_out){
suff_y <- c(reproduced_suff)
suff_mean <- colMeans(reproduced_suff)
m = length(reproduced_suff[,1])
dim_x <- c("Coworker", "Advice", "Friendship", "CxA","CxF","AxF")#,"CxAxF")
df <- data.frame(suff_y,name = as.factor(rep(dim_x,each = m)))
df$name <- factor(df$name,levels = dim_x)
fig <- ggplot2::ggplot(df,ggplot2::aes(x = name, y = suff_y)) +
ggplot2::geom_boxplot(fill = "grey") +
ggplot2::geom_point( size = 3,ggplot2::aes(x = name,y=rep(obs_all,each = m)),color="red") +
ggplot2::geom_point( size = 3,ggplot2::aes(x = name,y=rep(obs_in,each = m)),color= "green") +
ggplot2::geom_point( size = 3,ggplot2::aes(x = name,y=rep(obs_out,each = m)),color="blue") +
ggplot2::theme_classic() +
ggplot2::labs(title = expression(paste("Box-plot of the reproduced sufficient statistic")) , x = "Layer interaction", y ="Sufficient statistic") +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5,size = 15),
axis.text = ggplot2::element_text(size=10),
axis.title = ggplot2::element_text(size=15),
panel.border = ggplot2::element_rect(colour = "black", fill=NA,linewidth = 1),
#legend.title = element_text( size = 30),
#legend.text = element_text( size = 30),
#legend.position = "right",
#legend.key.width = unit(5, 'cm'),
#legend.background = element_blank(),
legend.box.background = ggplot2::element_rect(colour = "black",linewidth = 1)) +
ggplot2::scale_color_manual(values = c("red"))
return(fig)
}
obs_in
obs_all
obs_out <- c(obs_in+obs_all)/2
draw_box_plot_LT_samp <- function(reproduced_suff, obs_all,obs_in,obs_out){
suff_y <- c(reproduced_suff)
suff_mean <- colMeans(reproduced_suff)
m = length(reproduced_suff[,1])
dim_x <- c("Coworker", "Advice", "Friendship", "CxA","CxF","AxF")#,"CxAxF")
df <- data.frame(suff_y,name = as.factor(rep(dim_x,each = m)))
df$name <- factor(df$name,levels = dim_x)
fig <- ggplot2::ggplot(df,ggplot2::aes(x = name, y = suff_y)) +
ggplot2::geom_boxplot(fill = "grey") +
ggplot2::geom_point( size = 3,ggplot2::aes(x = name,y=rep(obs_all,each = m)),color="red") +
ggplot2::geom_point( size = 3,ggplot2::aes(x = name,y=rep(obs_in,each = m)),color= "green") +
ggplot2::geom_point( size = 3,ggplot2::aes(x = name,y=rep(obs_out,each = m)),color="blue") +
ggplot2::theme_classic() +
ggplot2::labs(title = expression(paste("Box-plot of the reproduced sufficient statistic")) , x = "Layer interaction", y ="Sufficient statistic") +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5,size = 15),
axis.text = ggplot2::element_text(size=10),
axis.title = ggplot2::element_text(size=15),
panel.border = ggplot2::element_rect(colour = "black", fill=NA,linewidth = 1),
#legend.title = element_text( size = 30),
#legend.text = element_text( size = 30),
#legend.position = "right",
#legend.key.width = unit(5, 'cm'),
#legend.background = element_blank(),
legend.box.background = ggplot2::element_rect(colour = "black",linewidth = 1)) +
ggplot2::scale_color_manual(values = c("red"))
return(fig)
}
draw_box_plot_LT_samp(simulated_suff, obs_all,obs_in, obs_out)
obs_all
draw_box_plot_LT_samp <- function(reproduced_suff, obs_all,obs_in,obs_out){
suff_y <- c(reproduced_suff)
suff_mean <- colMeans(reproduced_suff)
m = length(reproduced_suff[,1])
dim_x <- c("Coworker", "Advice", "Friendship", "CxA","CxF","AxF")#,"CxAxF")
df <- data.frame(suff_y,name = as.factor(rep(dim_x,each = m)))
df$name <- factor(df$name,levels = dim_x)
fig <- ggplot2::ggplot(df,ggplot2::aes(x = name, y = suff_y)) +
ggplot2::geom_boxplot(fill = "grey") +
ggplot2::geom_point( size = 3,ggplot2::aes(x = name,y=rep(obs_all,each = m)),color="red") +
ggplot2::geom_point( size = 3,ggplot2::aes(x = name,y=rep(obs_in,each = m)),color= "green") +
ggplot2::geom_point( size = 3,ggplot2::aes(x = name,y=rep(obs_out,each = m)),color="blue") +
ggplot2::theme_classic() +
ggplot2::labs(title = expression(paste("Box-plot of the reproduced sufficient statistic")) , x = "Layer interaction", y ="Sufficient statistic") +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5,size = 15),
axis.text = ggplot2::element_text(size=10),
axis.title = ggplot2::element_text(size=15),
panel.border = ggplot2::element_rect(colour = "black", fill=NA,linewidth = 1),
#legend.title = element_text( size = 30),
#legend.text = element_text( size = 30),
#legend.position = "right",
#legend.key.width = unit(5, 'cm'),
#legend.background = element_blank(),
legend.box.background = ggplot2::element_rect(colour = "black",linewidth = 1)) #+
#ggplot2::scale_color_manual(values = c("red"))
return(fig)
}
draw_box_plot_LT_samp(simulated_suff, obs_all,obs_in, obs_out)
Lazega_lawyer_network == samp1
Lazega_lawyer_network
samp1
Lazega_lawyer_network[,1:3]
Lazega_lawyer_network[,1:3] == samp1[,1:3]
Lazega_lawyer_network[,1:3] != samp1[,1:3]
Lazega_lawyer_network[,1] != samp1[,1]
Lazega_lawyer_network[i,]
Lazega_lawyer_network[1,]
rowA <- Lazega_lawyer_network[i,]
i=10
rowA <- Lazega_lawyer_network[i,]
match_vec <- apply(samp1, 1, function(rowB) all(rowB == rowA))
match_vec
B <- matrix(c(5, 6,
1, 2,
7, 8), ncol = 2, byrow = TRUE)
B
## obatin out-samples
for(i in length(Lazega_lawyer_network[,1])){
rowA <- Lazega_lawyer_network[i,]
match_vec <- apply(samp1, 1, function(rowB) all(rowB == rowA))
}
rowA
samp1[,1]==69
samp1[samp1[,1]==69,]
Lazega_lawyer_network
match_vec <- apply(samp1, 1, function(rowB) all(rowB == rowA))
match_vec
any(match_vec)
## obatin out-samples
out_samp <- matrix(0,1,3)
out_samp
## obatin out-samples
out_samp <- matrix(0,1,3)
for(i in length(Lazega_lawyer_network[,1])){
rowA <- Lazega_lawyer_network[i,]
match_vec <- apply(samp1, 1, function(rowB) all(rowB == rowA))
if(!any(match_vec)){
out_samp <- rbind(out_samp,rowA)
}
}
out_samp <- out_samp[-1,]
out_samp
samp1
i=1
rowA <- Lazega_lawyer_network[i,]
rowA
match_vec <- apply(samp1, 1, function(rowB) all(rowB == rowA))
match_vec
any(match_vec)
!any(match_vec)
out_samp <- rbind(out_samp,rowA)
out_samp
matrix(0,1,3)
i=2
out_samp[1,]
rowA <- Lazega_lawyer_network[i,]
match_vec <- apply(samp1, 1, function(rowB) all(rowB == rowA))
match_vec
!any(match_vec)
out_samp <- rbind(out_samp,rowA)
out_samp
out_samp <- out_samp[-1,]
out_samp
out_samp <- matrix(0,1,3)
for(i in length(Lazega_lawyer_network[,1])){
rowA <- Lazega_lawyer_network[i,]
match_vec <- apply(samp1, 1, function(rowB) all(rowB == rowA))
if(!any(match_vec)){
out_samp <- rbind(out_samp,rowA)
}
}
out_samp
for(i in length(Lazega_lawyer_network[,1])){
rowA <- Lazega_lawyer_network[i,]
match_vec <- apply(samp1, 1, function(rowB) all(rowB == rowA))
if(!any(match_vec)){
out_samp <- rbind(out_samp,rowA)
}
}
out_samp
for(i in length(Lazega_lawyer_network[,1])){
rowA <- Lazega_lawyer_network[i,]
rowA
match_vec <- apply(samp1, 1, function(rowB) all(rowB == rowA))
if(!any(match_vec)){
out_samp <- rbind(out_samp,rowA)
}
}
## obatin out-samples
out_samp <- matrix(0,1,3)
for(i in 1:length(Lazega_lawyer_network[,1])){
rowA <- Lazega_lawyer_network[i,]
match_vec <- apply(samp1, 1, function(rowB) all(rowB == rowA))
if(!any(match_vec)){
out_samp <- rbind(out_samp,rowA)
}
}
out_samp
out_samp <- out_samp[-1,]
?rbind
obs_out <- compute_suffstats_Lazega(out_samp)
obs_out
# m indicates the number of repetitions
simulated_suff <- simulate_suffstats_Lazega(data = samp1, m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
## Examples of data analysis using the Lazega lawyer network data set
obs_all <- compute_suffstats_Lazega(Lazega_lawyer_network)
obs_in <- compute_suffstats_Lazega(net_data = samp1) # compute the observed sufficient statistics from the link tracing samples.
obs_out <- compute_suffstats_Lazega(out_samp)
draw_box_plot_LT_samp <- function(reproduced_suff, obs_all,obs_in,obs_out){
suff_y <- c(reproduced_suff)
suff_mean <- colMeans(reproduced_suff)
m = length(reproduced_suff[,1])
dim_x <- c("Coworker", "Advice", "Friendship", "CxA","CxF","AxF")#,"CxAxF")
df <- data.frame(suff_y,name = as.factor(rep(dim_x,each = m)))
df$name <- factor(df$name,levels = dim_x)
fig <- ggplot2::ggplot(df,ggplot2::aes(x = name, y = suff_y)) +
ggplot2::geom_boxplot(fill = "grey") +
ggplot2::geom_point( size = 3,ggplot2::aes(x = name,y=rep(obs_all,each = m)),color="red") +
ggplot2::geom_point( size = 3,ggplot2::aes(x = name,y=rep(obs_in,each = m)),color= "green") +
ggplot2::geom_point( size = 3,ggplot2::aes(x = name,y=rep(obs_out,each = m)),color="blue") +
ggplot2::theme_classic() +
ggplot2::labs(title = expression(paste("Box-plot of the reproduced sufficient statistic")) , x = "Layer interaction", y ="Sufficient statistic") +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5,size = 15),
axis.text = ggplot2::element_text(size=10),
axis.title = ggplot2::element_text(size=15),
panel.border = ggplot2::element_rect(colour = "black", fill=NA,linewidth = 1),
#legend.title = element_text( size = 30),
#legend.text = element_text( size = 30),
#legend.position = "right",
#legend.key.width = unit(5, 'cm'),
#legend.background = element_blank(),
legend.box.background = ggplot2::element_rect(colour = "black",linewidth = 1)) +
ggplot2::scale_color_manual(values = c("red"))
return(fig)
}
draw_box_plot_LT_samp(simulated_suff, obs_all,obs_in, obs_out)
