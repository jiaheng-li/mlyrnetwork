0.25+0.25^2+0.25^3+0.25^4+0.25^5
for(i in 1:5){}
for(i in 1:5){
a = a + choose(5,i)*fac(i)}
a = 0
for(i in 1:5){
a = a + choose(5,i)*fac(i)}
a = a + choose(5,i)*factorial(i)}
a = 0
for(i in 1:5){
a = a + choose(5,i)*factorial(i)}
a / 20^5
a = 0
for(i in 1:5){
a = a + choose(5,i)*factorial(i) * factorial(5-i)}
a/20^5
choose(5,1)
choose(5,2)
choose(5,5)
a = 0
for(i in 1:5){
a = a + choose(5,i)*factorial(i) * factorial(5-i)}
a/(20^5)
a = 0
for(i in 1:5){
a = a + choose(20-i,5-i)*choose(5,i)*factorial(i) * factorial(5-i)}
a/(20^5)
a = 0
for(i in 1:5){
a = a + choose(19,5-i)*choose(5,i)*factorial(i) * factorial(5-i)}
a/20^5
a = 0
for(i in 1:5){
a = a + 19^(5-i)*choose(5,i)*factorial(i)}
a/20^5
a = 0
for(i in 1:5){
a = a + 19^(5-i)*choose(5,i)}
a/20^5
1-(19/20)^5
1-(0.75)^5
5*19/20^5
choose(20+5-1,5)
5*19^4/20^5
(choose(19,4)+choose(19,3)+choose(19,2) + choose(19,1))/choose(20+5-1,5)
(choose(19,4)+choose(19,3)+choose(19,2) + choose(19,1) + choose(19,0))/choose(20+5-1,5)
(choose(19,4)/choose(20+5-1,5)
)
(1/20)*(19/20)^4
5*choose(15,4)/choose(20,5)
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(123456)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 4  #number of layers
H <- 3
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- rep("ml_order2",mdim)
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
gy <- 1
params[,c(3,6)] = 0
theta <- params[3,]
N <- 100
seed <- sample(1:9999999,M,replace = FALSE)
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=seed)
NetMat <- res$net
est_result <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed,gy)
est_result
theta
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(123456)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 3  #number of layers
H <- 2
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- rep("ml_order2",mdim)
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
gy <- 1
params[,c(3,6)] = 0
theta <- params[3,]
N <- 100
seed <- sample(1:9999999,M,replace = FALSE)
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=seed)
NetMat <- res$net
est_result <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed,gy)
dist_mat <- data.frame(est_result)
values <- rep(0,mdim)
for (i in c(1:mdim)){
values[i] <- dist_mat[i,1]
}
values
theta
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(123456)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 4  #number of layers
H <- 2
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- rep("ml_order2",mdim)
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
gy <- 1
params[,c(3,6)] = 0
theta <- params[3,]
N <- 100
seed <- sample(1:9999999,M,replace = FALSE)
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=seed)
NetMat <- res$net
tic <- Sys.time()
est_result <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed,gy)
toc <- Sys.time()
dist_mat <- data.frame(est_result)
values <- rep(0,mdim)
for (i in c(1:mdim)){
values[i] <- dist_mat[i,1]
}
values
theta
as.numeric(difftime(toc, tic, units = "secs"))
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(123456)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 4  #number of layers
H <- 3
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- rep("ml_order2",mdim)
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
gy <- 1
params[,c(3,6)] = 0
theta <- params[3,]
N <- 100
seed <- sample(1:9999999,M,replace = FALSE)
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=seed)
NetMat <- res$net
tic <- Sys.time()
est_result <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed,gy)
toc <- Sys.time()
dist_mat <- data.frame(est_result)
values <- rep(0,mdim)
for (i in c(1:mdim)){
values[i] <- dist_mat[i,1]
}
values
theta
as.numeric(difftime(toc, tic, units = "secs"))
lm()
x = c(1:10)
x
y = x+10+rnorm(0,1,10)
y
y = x+10+rnorm(10,0,1)
y
m <- lm(y~x)
m
summary(m)
## Test for table output
library(insight)
install.packages("insight")
## Test for table output
library(insight)
df <- data.frame(
Variable = c(1, 3, 5, 3, 1),
Group = c("A", "A", "A", "B", "B"),
CI = c(0.95, 0.95, 0.95, 0.95, 0.95),
CI_low = c(3.35, 2.425, 6.213, 12.1, 1.23),
CI_high = c(4.23, 5.31, 7.123, 13.5, 3.61),
p = c(0.001, 0.0456, 0.45, 0.0042, 0.34)
)
df
knitr::kable(df, format = 'markdown')
kable(df, format = 'markdown')
knitr::kable(df, format = 'markdown')
knitr::kable(df, format = 'html')
format_table(df)
df
f <- . %>% sin %>% cos
library(magrittr)
f <- . %>% sin %>% cos
sin(cos(0))
f(0)
cos(sin(0))
2 %>% sqrt
set.seed(123)
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>%
colSums
set.seed(123)
rnorm(200) %>%
matrix(ncol = 2) %>%
plot %>%
colSums
set.seed(123)
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>%
colSums
rm(list = ls())
library("devtools")
devtools::document()
a = list('a',1)
a
is.type(a)
is(a)
?is
a = list('a',1,3,'3')
a
is(a)
typeof(a)
class(a)
typeof(a)
class(a) <- 'names'
a
typeof(a)
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
set.seed(123456)
seed <- sample(1:9999999,1,replace = FALSE)
## Parameter settings
burnin <- 100
k <- 14 # number of layers, okay to change
H <- 2  # highest order of interactions, okay to change (<= k)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
intv <- 3 # sampling iterval
iter_max <- 30000 # maximum iterations for estimation
# generate stochastic block model basis as an example
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
#basis_arguments <- c(0.3, 20240308)
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 2 # number of nodes
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
a = rcpp_compute_dyad_suffstats(mlnet$net, 1, 100, intv, mdim, mterm, N, k, H, seed, basis_arguments)
suff1 <- colSums(a$dyad_suffstats)
suff2 <- mlnet$suff_stats[1:mdim,3]
norm(suff1[3:(mdim+2)] - suff2,"2")
suff1
suff2
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
set.seed(123456)
seed <- sample(1:9999999,1,replace = FALSE)
## Parameter settings
burnin <- 100
k <- 15 # number of layers, okay to change
H <- 2  # highest order of interactions, okay to change (<= k)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
intv <- 3 # sampling iterval
iter_max <- 30000 # maximum iterations for estimation
# generate stochastic block model basis as an example
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
#basis_arguments <- c(0.3, 20240308)
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 20 # number of nodes
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
a = rcpp_compute_dyad_suffstats(mlnet$net, 1, 100, intv, mdim, mterm, N, k, H, seed, basis_arguments)
suff1 <- colSums(a$dyad_suffstats)
suff2 <- mlnet$suff_stats[1:mdim,3]
norm(suff1[3:(mdim+2)] - suff2,"2")
suff1
suff2
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
set.seed(123456)
seed <- sample(1:9999999,1,replace = FALSE)
## Parameter settings
burnin <- 100
k <- 20 # number of layers, okay to change
H <- 2  # highest order of interactions, okay to change (<= k)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
intv <- 3 # sampling iterval
iter_max <- 30000 # maximum iterations for estimation
# generate stochastic block model basis as an example
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
#basis_arguments <- c(0.3, 20240308)
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100 # number of nodes
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
a = rcpp_compute_dyad_suffstats(mlnet$net, 1, 100, intv, mdim, mterm, N, k, H, seed, basis_arguments)
suff1 <- colSums(a$dyad_suffstats)
suff2 <- mlnet$suff_stats[1:mdim,3]
norm(suff1[3:(mdim+2)] - suff2,"2")
suff1
suff2
