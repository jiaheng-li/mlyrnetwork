0.25+0.25^2+0.25^3+0.25^4+0.25^5
for(i in 1:5){}
for(i in 1:5){
a = a + choose(5,i)*fac(i)}
a = 0
for(i in 1:5){
a = a + choose(5,i)*fac(i)}
a = a + choose(5,i)*factorial(i)}
a = 0
for(i in 1:5){
a = a + choose(5,i)*factorial(i)}
a / 20^5
a = 0
for(i in 1:5){
a = a + choose(5,i)*factorial(i) * factorial(5-i)}
a/20^5
choose(5,1)
choose(5,2)
choose(5,5)
a = 0
for(i in 1:5){
a = a + choose(5,i)*factorial(i) * factorial(5-i)}
a/(20^5)
a = 0
for(i in 1:5){
a = a + choose(20-i,5-i)*choose(5,i)*factorial(i) * factorial(5-i)}
a/(20^5)
a = 0
for(i in 1:5){
a = a + choose(19,5-i)*choose(5,i)*factorial(i) * factorial(5-i)}
a/20^5
a = 0
for(i in 1:5){
a = a + 19^(5-i)*choose(5,i)*factorial(i)}
a/20^5
a = 0
for(i in 1:5){
a = a + 19^(5-i)*choose(5,i)}
a/20^5
1-(19/20)^5
1-(0.75)^5
5*19/20^5
choose(20+5-1,5)
5*19^4/20^5
(choose(19,4)+choose(19,3)+choose(19,2) + choose(19,1))/choose(20+5-1,5)
(choose(19,4)+choose(19,3)+choose(19,2) + choose(19,1) + choose(19,0))/choose(20+5-1,5)
(choose(19,4)/choose(20+5-1,5)
)
(1/20)*(19/20)^4
5*choose(15,4)/choose(20,5)
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(123456)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 4  #number of layers
H <- 3
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- rep("ml_order2",mdim)
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
gy <- 1
params[,c(3,6)] = 0
theta <- params[3,]
N <- 100
seed <- sample(1:9999999,M,replace = FALSE)
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=seed)
NetMat <- res$net
est_result <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed,gy)
est_result
theta
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(123456)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 3  #number of layers
H <- 2
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- rep("ml_order2",mdim)
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
gy <- 1
params[,c(3,6)] = 0
theta <- params[3,]
N <- 100
seed <- sample(1:9999999,M,replace = FALSE)
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=seed)
NetMat <- res$net
est_result <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed,gy)
dist_mat <- data.frame(est_result)
values <- rep(0,mdim)
for (i in c(1:mdim)){
values[i] <- dist_mat[i,1]
}
values
theta
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(123456)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 4  #number of layers
H <- 2
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- rep("ml_order2",mdim)
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
gy <- 1
params[,c(3,6)] = 0
theta <- params[3,]
N <- 100
seed <- sample(1:9999999,M,replace = FALSE)
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=seed)
NetMat <- res$net
tic <- Sys.time()
est_result <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed,gy)
toc <- Sys.time()
dist_mat <- data.frame(est_result)
values <- rep(0,mdim)
for (i in c(1:mdim)){
values[i] <- dist_mat[i,1]
}
values
theta
as.numeric(difftime(toc, tic, units = "secs"))
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(123456)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 4  #number of layers
H <- 3
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- rep("ml_order2",mdim)
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
gy <- 1
params[,c(3,6)] = 0
theta <- params[3,]
N <- 100
seed <- sample(1:9999999,M,replace = FALSE)
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=seed)
NetMat <- res$net
tic <- Sys.time()
est_result <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed,gy)
toc <- Sys.time()
dist_mat <- data.frame(est_result)
values <- rep(0,mdim)
for (i in c(1:mdim)){
values[i] <- dist_mat[i,1]
}
values
theta
as.numeric(difftime(toc, tic, units = "secs"))
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
devtools::document()
data(Lazega_lawyer_network)
unique_dyads <- unique(Lazega_lawyer_network[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
samp_num <- 1
burnin <- 100
k <- 3  #number of layers
mdim <- 6
mterm <- 'other'
intv <- 3
iter_max <- 30000
seed <- 20240317
N <- 71
#est_of_Laz <- rcpp_estimate_model_ml_Hway(Lazega_lawyer_network, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed,  unique_dyads_vec ,iter_max)
#theta <- est_of_Laz$theta_est
theta <- rep(0,mdim)
## Reproduce Lazega and estimate the reproduced networks
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
devtools::document()
data(Lazega_lawyer_network)
unique_dyads <- unique(Lazega_lawyer_network[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
unique_dyads_vec
## Reproduce Lazega and estimate the reproduced networks
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
devtools::document()
data(Lazega_lawyer_network)
unique_dyads <- unique(Lazega_lawyer_network[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
samp_num <- 1
burnin <- 100
k <- 3  #number of layers
mdim <- 6
mterm <- 'other'
intv <- 3
iter_max <- 30000
seed <- 20240317
N <- 71
#est_of_Laz <- rcpp_estimate_model_ml_Hway(Lazega_lawyer_network, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed,  unique_dyads_vec ,iter_max)
#theta <- est_of_Laz$theta_est
theta <- rep(0,mdim)
#tic_new <- Sys.time()
reproduced <- samp_ml(theta,N = 71,samp_num = 1,burnin = 100,k = 3,mdim = 6,
mterm = 'other',intv = 3, H = 2,
seed = seed, basis_arguments = unique_dyads_vec)
reproduced
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
devtools::document()
data(Lazega_lawyer_network)
unique_dyads <- unique(Lazega_lawyer_network[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
samp_num <- 1
burnin <- 100
k <- 3  #number of layers
mdim <- 6
mterm <- 'other'
intv <- 3
iter_max <- 30000
seed <- 20240317
N <- 71
tic_new <- Sys.time()
est_of_Laz <- rcpp_estimate_model_ml_Hway(Lazega_lawyer_network, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed,  unique_dyads_vec ,iter_max)
theta <- est_of_Laz$theta_est
reproduced <- samp_ml(theta,N = 71,samp_num = 1,burnin = 100,k = 3,mdim = 6,
mterm = 'other',intv = 3, H = 2,
seed = seed, basis_arguments = unique_dyads_vec)
toc_new <- Sys.time()
reproduced$suff_stats
