mlnetwork <- mlnetwork[-1,]
samp_num <- 1
burnin <- 100
k <- 3  #number of layers
mdim <- 6
mterm <- rep("ml_order2",mdim)
intv <- 3
seed <- 123456
rNR_tol <- 1000
rNR_max <- 1000
rMCMLE_max <- 1000
g <- 0
mlnetwork
rm(list = ls())
library(ergm)
library(GGally)
library(latentnet)
library(ggplot2)
library(ggpubr)
require(grid)
library(reshape2)
library(sna)
## Create figure handles for each of the network
fig <- vector("list",length = 3*3)
node_colors <- c("orange","blue","purple")
# Generate SBM with K = 3 blocks
N <- 75
node_membs <- c(rep(1, 25), rep(2, 25), rep(3, 25))
p_within <- .25
p_between <- .01
gen_sbm <- function(N, node_membs, p_within, p_between) {
net <- matrix(0, nrow = N, ncol = N)
for (i in 1:(N-1)) {
for (j in (i+1):N) {
net[i, j] <- rbinom(1, 1, ifelse(node_membs[i] == node_membs[j], p_within, p_between))
net[j, i] <- net[i, j]
}
}
net <- as.network(net, directed = FALSE)
return(net)
}
## Generate 3 layers of SBM
for(i in c(1:3)){
net <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net %v% "x" = x[, 1]
net %v% "y" = x[, 2]
fig[[i]] <- ggnet2(net, node.size = 3, node.color = node_colors[i], mode = c("x", "y") ) +
#labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
#ggarrange(fig[[1]],fig[[2]],fig[[3]],ncol = 3, nrow = 1)
# Generate Latent Space Model (d = 2)
N <- 75
theta <- -1
pos <- t(sapply(1:N, function(x) { rnorm(2) }))
gen_lsm <- function(N, theta, pos) {
net <- matrix(0, nrow = N, ncol = N)
for (i in 1:(N-1)) {
for (j in (i+1):N) {
odds <- theta - norm(pos[i,] - pos[j, ], type = "2")
p <- exp(odds) / (1 + exp(odds))
net[i, j] <- rbinom(1, 1, p)
net[j, i] <- net[i, j]
}
}
net <- as.network(net, directed = FALSE)
return(net)
}
## Generate 3 layers of LSM
for(i in c(1:3)){
net <- gen_lsm(N, theta, pos)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net %v% "x" = x[, 1]
net %v% "y" = x[, 2]
fig[[i+3]] <- ggnet2(net, node.size = 3, node.color = node_colors[i], mode = c("x", "y") ) +
#labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
#ggarrange(fig[[4]],fig[[5]],fig[[6]],ncol = 3, nrow = 1)
# Generate ERGM
N <- 75
theta <- c(-3.25, .5, .5)
## Generate 3 layers of ERGM
for(i in c(1:3)){
net <- simulate(network.initialize(N, directed = FALSE) ~ edges + gwesp,
coef = theta,
control = control.simulate(MCMC.burnin = 3e+6))
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net %v% "x" = x[, 1]
net %v% "y" = x[, 2]
fig[[i+6]] <- ggnet2(net, node.size = 3, node.color = node_colors[i], mode = c("x", "y") ) +
#labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
ggarrange(fig[[7]],fig[[8]],fig[[9]],ncol = 3, nrow = 1)
## Arrange all 9 graphs in one plot
commonplot <- ggarrange(fig[[7]],fig[[8]],fig[[9]],fig[[1]],fig[[2]],fig[[3]],fig[[4]],fig[[5]],fig[[6]],ncol = 3, nrow = 3)
annotate_figure(commonplot,
top = text_grob("Layer 1                                                                              Layer 2                                                                         Layer 3      ",size = 12),
left = text_grob("  LSM Basis                  SBM Basis             ERGM Basis       ",size = 14,rot = 90)
)
annotate_figure(commonplot,
top = text_grob("Layer 1                                                                              Layer 2                                                                         Layer 3      ",size = 14),
left = text_grob("  LSM Basis                  SBM Basis             ERGM Basis       ",size = 14,rot = 90)
)
rm(list = ls())
library(ergm)
library(GGally)
library(latentnet)
library(ggplot2)
library(ggpubr)
require(grid)
library(reshape2)
library(sna)
## Create figure handles for each of the network
fig <- vector("list",length = 3*3)
node_colors <- c("orange","blue","purple")
# Generate SBM with K = 3 blocks
N <- 75
node_membs <- c(rep(1, 25), rep(2, 25), rep(3, 25))
p_within <- .25
p_between <- .01
gen_sbm <- function(N, node_membs, p_within, p_between) {
net <- matrix(0, nrow = N, ncol = N)
for (i in 1:(N-1)) {
for (j in (i+1):N) {
net[i, j] <- rbinom(1, 1, ifelse(node_membs[i] == node_membs[j], p_within, p_between))
net[j, i] <- net[i, j]
}
}
net <- as.network(net, directed = FALSE)
return(net)
}
## Generate 3 layers of SBM
for(i in c(1:3)){
net <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net %v% "x" = x[, 1]
net %v% "y" = x[, 2]
fig[[i]] <- ggnet2(net, node.size = 3, node.color = node_colors[i], mode = c("x", "y") ) +
#labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
#ggarrange(fig[[1]],fig[[2]],fig[[3]],ncol = 3, nrow = 1)
# Generate Latent Space Model (d = 2)
N <- 75
theta <- -1
pos <- t(sapply(1:N, function(x) { rnorm(2) }))
gen_lsm <- function(N, theta, pos) {
net <- matrix(0, nrow = N, ncol = N)
for (i in 1:(N-1)) {
for (j in (i+1):N) {
odds <- theta - norm(pos[i,] - pos[j, ], type = "2")
p <- exp(odds) / (1 + exp(odds))
net[i, j] <- rbinom(1, 1, p)
net[j, i] <- net[i, j]
}
}
net <- as.network(net, directed = FALSE)
return(net)
}
## Generate 3 layers of LSM
for(i in c(1:3)){
net <- gen_lsm(N, theta, pos)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net %v% "x" = x[, 1]
net %v% "y" = x[, 2]
fig[[i+3]] <- ggnet2(net, node.size = 3, node.color = node_colors[i], mode = c("x", "y") ) +
#labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
#ggarrange(fig[[4]],fig[[5]],fig[[6]],ncol = 3, nrow = 1)
# Generate ERGM
N <- 75
theta <- c(-3.25, .5, .5)
## Generate 3 layers of ERGM
for(i in c(1:3)){
net <- simulate(network.initialize(N, directed = FALSE) ~ edges + gwesp,
coef = theta,
control = control.simulate(MCMC.burnin = 3e+6))
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net %v% "x" = x[, 1]
net %v% "y" = x[, 2]
fig[[i+6]] <- ggnet2(net, node.size = 3, node.color = node_colors[i], mode = c("x", "y") ) +
#labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
ggarrange(fig[[7]],fig[[8]],fig[[9]],ncol = 3, nrow = 1)
## Arrange all 9 graphs in one plot
commonplot <- ggarrange(fig[[7]],fig[[8]],fig[[9]],fig[[1]],fig[[2]],fig[[3]],fig[[4]],fig[[5]],fig[[6]],ncol = 3, nrow = 3)
annotate_figure(commonplot,
top = text_grob("Layer 1                                                                              Layer 2                                                                         Layer 3      ",size = 14),
left = text_grob("  LSM Basis                  SBM Basis             ERGM Basis       ",size = 14,rot = 90)
)
#
#
# ### Create 3 graphs for 3 different basis structures
# ## Create figure handles for each of the network
# fig <- vector("list",length = 3*1)
# node_colors <- c("orange","blue","purple")
#
# # Generate SBM with K = 3 blocks
# N <- 75
# node_membs <- c(rep(1, 25), rep(2, 25), rep(3, 25))
# p_within <- .25
# p_between <- .01
#
# gen_sbm <- function(N, node_membs, p_within, p_between) {
#   net <- matrix(0, nrow = N, ncol = N)
#   for (i in 1:(N-1)) {
#     for (j in (i+1):N) {
#       net[i, j] <- rbinom(1, 1, ifelse(node_membs[i] == node_membs[j], p_within, p_between))
#       net[j, i] <- net[i, j]
#     }
#   }
#   net <- as.network(net, directed = FALSE)
#   return(net)
# }
#
#
#
# ## Generate SBM
# for(i in c(1:1)){
#   net <- gen_sbm(N, node_membs, p_within, p_between)
#
#   ## x is the position of each node, use this for all networks
#   if(i == 1){
#     x = gplot.layout.fruchtermanreingold(net, NULL)
#
#   }
#
#   ## Draw the SBM network, use "mode" argument to control the node position
#   net %v% "x" = x[, 1]
#   net %v% "y" = x[, 2]
#   fig[[2]] <- ggnet2(net, node.size = 3, node.color = node_colors[2], mode = c("x", "y") ) +
#     labs(title = paste0("SBM Basis")) +  ## Change the graph title here
#     theme(plot.title = element_text(hjust = 0.5,size = 20))   ## Change the font size here
# }
#
#
# ## Generate LSM
# N <- 75
# theta <- -1
# pos <- t(sapply(1:N, function(x) { rnorm(2) }))
#
# gen_lsm <- function(N, theta, pos) {
#   net <- matrix(0, nrow = N, ncol = N)
#   for (i in 1:(N-1)) {
#     for (j in (i+1):N) {
#       odds <- theta - norm(pos[i,] - pos[j, ], type = "2")
#       p <- exp(odds) / (1 + exp(odds))
#       net[i, j] <- rbinom(1, 1, p)
#       net[j, i] <- net[i, j]
#     }
#   }
#   net <- as.network(net, directed = FALSE)
#   return(net)
# }
#
# for(i in c(1:1)){
#   net <- gen_lsm(N, theta, pos)
#
#   ## x is the position of each node, use this for all networks
#   if(i == 1){
#     x = gplot.layout.fruchtermanreingold(net, NULL)
#
#   }
#
#   ## Draw the SBM network, use "mode" argument to control the node position
#   net %v% "x" = x[, 1]
#   net %v% "y" = x[, 2]
#   fig[[3]] <- ggnet2(net, node.size = 3, node.color = node_colors[3], mode = c("x", "y") ) +
#     labs(title = paste0("LSM Basis")) +  ## Change the graph title here
#     theme(plot.title = element_text(hjust = 0.5,size = 20))   ## Change the font size here
# }
#
#
#
# # Generate ERGM
# N <- 75
# theta <- c(-3.25, .5, .5)
#
# ## Generate the ERGM
# for(i in c(1:1)){
#   net <- simulate(network.initialize(N, directed = FALSE) ~ edges + gwesp,
#                   coef = theta,
#                   control = control.simulate(MCMC.burnin = 3e+6))
#
#   ## x is the position of each node, use this for all networks
#   if(i == 1){
#     x = gplot.layout.fruchtermanreingold(net, NULL)
#
#   }
#
#   ## Draw the SBM network, use "mode" argument to control the node position
#   net %v% "x" = x[, 1]
#   net %v% "y" = x[, 2]
#   fig[[1]] <- ggnet2(net, node.size = 3, node.color = node_colors[1], mode = c("x", "y") ) +
#     labs(title = paste0("ERGM Basis")) +  ## Change the graph title here
#     theme(plot.title = element_text(hjust = 0.5,size = 20))   ## Change the font size here
# }
#
# ## Arrange all 3 networks in one plot
# ggarrange(fig[[1]],fig[[2]],fig[[3]],ncol = 3, nrow = 1)
#
#
annotate_figure(commonplot,
top = text_grob("Layer 1                                                                        Layer 2                                                                  Layer 3      ",size = 14),
left = text_grob("  LSM Basis                  SBM Basis             ERGM Basis       ",size = 14,rot = 90)
)
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(1234568)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 3  #number of layers
H <- 2
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'BER'
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
params[,c(3,6)] = 0
theta <- params[3,]
N <- 200
iter_max <- 30000
basis_arguments <- c(0.5, 20240308)
seed <- sample(1:9999999,M,replace = FALSE)
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=20240306)
devtools::load_all()
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=20240306)
devtools::load_all()
N <- 100
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=20240306)
devtools::load_all()
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=20240306)
res
res_new <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed, basis_arguments ,iter_max)
NetMat <- res$net
res_new <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed, basis_arguments ,iter_max)
N <- 10
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(1234568)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 3  #number of layers
H <- 2
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'BER'
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
params[,c(3,6)] = 0
theta <- params[3,]
N <- 10
iter_max <- 30000
basis_arguments <- c(0.5, 20240308)
seed <- sample(1:9999999,M,replace = FALSE)
res <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=20240306)
NetMat <- res$net
res_new <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed, basis_arguments ,iter_max)
res_new
theta
N <- 100
N <- 10
res_new <- sim_est(theta = theta, N = N, k = k, H = H, mdim = mdim)
N <- 100
res_new <- sim_est(theta = theta, N = N, k = k, H = H, mdim = mdim)
theta
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 3  #number of layers
H <- 2
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'BER'
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
params[,c(3,6)] = 0
theta <- params[3,]
N <- 100
iter_max <- 30000
basis_arguments <- c(0.5, 20240308)
seed <- sample(1:9999999,M,replace = FALSE)
res_new <- sim_est(theta = theta, N = N, k = k, H = H, mdim = mdim)
res_new
N <- 200
(res_new <- sim_est(theta = theta, N = N, k = k, H = H, mdim = mdim))
basis_arguments <- c(1, 20240308)
#' @param mterm
#' @param intv
#' @param iter_max
#' @param seed
#' @param gy
#'
#' @return a list
#' @export
#'
#' @examples
sim_est <- function(theta,N,samp_num = 1,burnin = 100,k = 3, H = 2, mdim, mterm = "BER",intv = 3,
seed = 0, iter_max = 30000, basis_arguments = c(1,0)){
tic <- Sys.time()
RNETWORK <- rcpp_simulate_ml_Hway(samp_num, burnin, intv, mdim, mterm, N, k, theta, H, seed, basis_arguments)
NetMat <- RNETWORK$elist
result <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed,basis_arguments, iter_max)
dist_mat <- data.frame(result)
values <- rep(0,mdim)
for (i in c(1:mdim)){
values[i] <- dist_mat[i,1]
}
toc <- Sys.time()
# Prepare result list
res <- list(theta = theta,theta_est = values,
time = as.numeric(difftime(toc, tic, units = "secs")), seed = seed, net_size = N)
return(res)
}
devtools::load_all()
devtools::load_all()
devtools::document()
basis_arguments <- c(1, 20240308)
seed <- sample(1:9999999,M,replace = FALSE)
(res_new <- sim_est(theta = theta, N = N, k = k, H = H, mdim = mdim))
norm(res_new$theta_est-res_new$theta,"2")/norm(res_new$theta)
norm(res_new$theta_est-res_new$theta,"2")/norm(res_new$theta,"2")
