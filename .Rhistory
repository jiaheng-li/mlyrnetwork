data = Lazega_lawyer_network
k <- max(data[,3])
N <- max(data)
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
?comp_indep_test_network
data = Lazega_lawyer_network
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
?comp_indep_test_network
data = Lazega_lawyer_network
k <- max(data[,3])
N <- max(data)
unique_dyads <- unique(data[,1:2])
n2 <- length(unique_dyads[,1])
dyad_vec <- matrix(0,n2,k+2)
n1 <- length(data[,1])
ind1 <- data[1,1]
ind2 <- data[1,2]
dyad_ind <- 1
# Form a matrix where each row is a dyad vector
for(i in 1:n1){
if(ind1 == data[i,1] & ind2 == data[i,2]){
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
else{
dyad_ind <- dyad_ind + 1
ind1 <- data[i,1]
ind2 <- data[i,2]
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
#dyad_ind <- data[i,2] - data[i,1] + (N-1 + (N-data[i,1]+1)* (data[i,1]!=2)) * (data[i,1]-1) / (2/((data[i,1]==2)+1))  * (data[i,1]!=1)
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
}
dyad_vec
ip_dist <- list()
neighboring_inner_prod <- rep(0,n2)
for(i in 1:n2){
node1 <- dyad_vec[i,1]
node2 <- dyad_vec[i,2]
non_neighboring_inner_prod <- rep(0,B)
neib_ind <- which(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2)
#non_neib_ind <- which(!(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2))
for(j in neib_ind){
if(j == i){next}
neighboring_inner_prod[i] <- neighboring_inner_prod[i] + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
}
}
neighboring_inner_prod <- rep(0,n2)
for(i in 1:n2){
node1 <- dyad_vec[i,1]
node2 <- dyad_vec[i,2]
#non_neighboring_inner_prod <- rep(0,B)
neib_ind <- which(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2)
#non_neib_ind <- which(!(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2))
for(j in neib_ind){
if(j == i){next}
neighboring_inner_prod[i] <- neighboring_inner_prod[i] + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
}
}
neighboring_inner_prod
mean(neighboring_inner_prod)
mean(c(1,2,3))
mean(c(1,2,3.6))
dyad_vec
nrows(dyad_vec)
nrow(dyad_vec)
sample(nrow(dyad_vec))
dyad_vec[sample(nrow(dyad_vec)),]
dyad_vec[sample(nrow(dyad_vec)),3:5]
dyad_vec[313:333,]
cbind(dyad_vec[,1:2])
cbind(dyad_vec[,1:2],dyad_vec[,3:5])
cbind(dyad_vec[,1:2],dyad_vec[sample(nrow(dyad_vec)),3:5])
dyad_vec[200,]
?sample
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
?comp_indep_test_network
comp_indep_test_network()
B = 100
data = Lazega_lawyer_network
k <- max(data[,3])
N <- max(data)
unique_dyads <- unique(data[,1:2])
n2 <- length(unique_dyads[,1])
dyad_vec <- matrix(0,n2,k+2)
n1 <- length(data[,1])
ind1 <- data[1,1]
ind2 <- data[1,2]
dyad_ind <- 1
# Form a matrix where each row is a dyad vector
for(i in 1:n1){
if(ind1 == data[i,1] & ind2 == data[i,2]){
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
else{
dyad_ind <- dyad_ind + 1
ind1 <- data[i,1]
ind2 <- data[i,2]
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
#dyad_ind <- data[i,2] - data[i,1] + (N-1 + (N-data[i,1]+1)* (data[i,1]!=2)) * (data[i,1]-1) / (2/((data[i,1]==2)+1))  * (data[i,1]!=1)
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
}
dyad_vec
TC <- rep(0,B+1) # list of test statistics
## test statistic from the observation
neighboring_inner_prod <- rep(0,n2)
# sum of neighboring inner products for each activated dyads
for(i in 1:n2){
node1 <- dyad_vec[i,1]
node2 <- dyad_vec[i,2]
#non_neighboring_inner_prod <- rep(0,B)
neib_ind <- which(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2)
#non_neib_ind <- which(!(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2))
for(j in neib_ind){
if(j == i){next}
neighboring_inner_prod[i] <- neighboring_inner_prod[i] + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
}
}
TC[1] <- mean(neighboring_inner_prod)
j=1
neighboring_inner_prod <- rep(0,n2)
permuted_dyad <- cbind(dyad_vec[,1:2],dyad_vec[sample(nrow(dyad_vec)),3:5])
permuted_dyad == dyad_vec
i=1
node1 <- permuted_dyad[i,1]
node2 <- permuted_dyad[i,2]
neib_ind <- which(permuted_dyad[,1] == node1 | permuted_dyad[,1] == node2 | permuted_dyad[,2] == node1 | permuted_dyad[,2] == node2)
neib_ind
neib_ind <- which(permuted_dyad[,1] == node1 | permuted_dyad[,1] == node2 | permuted_dyad[,2] == node1 | permuted_dyad[,2] == node2)
b=1
j=1
if(j == i){next}
j == i
j=2
j == i
neighboring_inner_prod[i] <- neighboring_inner_prod[i] + sum(permuted_dyad[i,3:5] * permuted_dyad[j,3:5])
neighboring_inner_prod
permuted_dyad[i,3:5] * permuted_dyad[j,3:5]
j=3
permuted_dyad[i,3:5] * permuted_dyad[j,3:5]
neighboring_inner_prod[i] <- neighboring_inner_prod[i] + sum(permuted_dyad[i,3:5] * permuted_dyad[j,3:5])
neighboring_inner_prod
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
comp_indep_test_network()
x <- comp_indep_test_network(B = B)
quant <- which(sort(x) == x[1])
#######################################
### Independence test for each dyad ###
#######################################
B <- 100
x <- comp_indep_test_network(B = B)
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
range(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
range(x)[2]-range(x)[1]+1
ceiling((2.5))
ceiling(2.5)
ceiling(2.1)
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=ceiling(range(x)[2]-range(x)[1]+1) )+
geom_vline(xintercept = x[1],col = "red")
#######################################
### Independence test for each dyad ###
#######################################
B <- 1000
x <- comp_indep_test_network(B = B)
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=ceiling(range(x)[2]-range(x)[1]+1) )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
library(igraph)
install.packages("igraph")
library(igraph)
set.seed(42)
network <- erdos.renyi.game(n = 10, p = 0.3, directed = FALSE)
network
plot(network)
V(network)
neighborhood(network)
unlist(neighborhood(network))
Lazega_lawyer_network
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
Lazega_lawyer_network
data = Lazega_lawyer_network
unique_dyads <- unique(data[,1:2])
View(unique_dyads)
unique_dyads_vec <- as.vector(t(unique_dyads))
unique_dyads_vec
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
?comp_indep_test_dyad
comp_dyad_mat()
dyad_vec <- comp_dyad_mat(data)
data = Lazega_lawyer_network
dyad_vec <- comp_dyad_mat(data)
n2 <- length(dyad_vec)
n2 <- length(dyad_vec[,1])
#usethis::use_package("expm")
library("devtools")
devtools::document()
comp_indep_test_network
comp_indep_test_network()
sample(10,3)
N <- max(data)
N=NULL
if(N){a=1}
if(!N){a=1}
if(N){a=1}
N = FALSE
if(N){a=1}
A
a
if(!N){a=1}
a
if(0){a=2}
a
if(!0){a=2}
a
dyad_vec[,1:2]
unlist(dyad_vec[,1:2])
unlist(dyad_vec[,1:2])
c(dyad_vec[,1:2])
which(dyad_vec !=0, arr.ind = T)
mat = matrix(rnorm(9), 3, 3)
which(mat !=0, arr.ind = T)
mat
mat[3,1]
mat[3,1]=0
mat = matrix(rnorm(9), 3, 3)
which(mat !=0, arr.ind = T)
mat
mat[3,1]=0
mat
which(mat !=0, arr.ind = T)
which(dyad_vec[,1:2] ==c(1,2), arr.ind = T)
dyad_vec
mat
which(dyad_vec[,1:2] ==c(1,2))
which(dyad_vec[,1] ==1)
a = c(12,2)
a
append(a,4)
init = 3
N <- max(data)
n2 <- length(dyad_vec[,1])
wave0 <- sample(N,init)
dyad_ind <- c()
for(i in wave0){
dyad_ind <- append(dyad_ind, which(dyad_vec[,1] == i | dyad_vec[,2] == i))
}
dyad_ind
dyad_vec[dyad_ind,1:2]
unique(dyad_vec[dyad_ind,1:2])
c(dyad_vec[dyad_ind,1:2])
unique(c(dyad_vec[dyad_ind,1:2]))
a
b =2
setdiff(a,b)
setdiff(b,b)
setdiff(b,a)
wave1 <- setdiff(unique(c(dyad_vec[dyad_ind,1:2])),wave0)
wave1
wave0
wave <- list()
append(wave, wave0)
wave[1]<- wave0
wave
wave[[1]]<- wave0
wave
wave[[1]]
wave <- list()
n2 <- length(dyad_vec[,1])
wave[[1]] <- sample(N,init)
for(j in 1:w){
dyad_ind <- c()
for(i in wave[[j]]){
dyad_ind <- append(dyad_ind, which(dyad_vec[,1] == i | dyad_vec[,2] == i))
}
wave[[j+1]] <- setdiff(unique(c(dyad_vec[dyad_ind,1:2])),wave[[j]])
}
w = 2
for(j in 1:w){
dyad_ind <- c()
for(i in wave[[j]]){
dyad_ind <- append(dyad_ind, which(dyad_vec[,1] == i | dyad_vec[,2] == i))
}
wave[[j+1]] <- setdiff(unique(c(dyad_vec[dyad_ind,1:2])),wave[[j]])
}
wave
unlist(wave)
dyad_vec <- comp_dyad_mat(data)
if(!N){
N <- max(data)
}
wave <- list()
n2 <- length(dyad_vec[,1])
wave[[1]] <- sample(N,init)
for(j in 1:w){
dyad_ind <- c()
for(i in wave[[j]]){
dyad_ind <- append(dyad_ind, which(dyad_vec[,1] == i | dyad_vec[,2] == i))
}
wave[[j+1]] <- setdiff(unique(c(dyad_vec[dyad_ind,1:2])),unlist(wave))
}
wave
unlist(wave)
a = unlist(wave)
1 in a
1 %in% a
Lazega_lawyer_network
length(dyad_vec[1,])
wave
node_set <- unlist(wave)
iter <- 0
for(i in 1:n2){
if(dyad_vec[i,1] %in% node_set & dyad_vec[i,2] %in% node_set){
for(j in 3:length(dyad_vec[1,])]){
i=1
dyad_vec[i,1] %in% node_set
iter <- 0
for(i in 1:n2){
if(dyad_vec[i,1] %in% node_set & dyad_vec[i,2] %in% node_set){
for(j in 3:length(dyad_vec[1,])){
if(dyad_vec[i,j] == 1){
iter <- iter + 1
lt_samp[iter,1] <- dyad_vec[i,1]
lt_samp[iter,2] <- dyad_vec[i,2]
lt_samp[iter,3] <- j-2
}
}
}
}
node_set <- unlist(wave)
for(i in 1:n2){
if(dyad_vec[i,1] %in% node_set & dyad_vec[i,2] %in% node_set){
for(j in 3:length(dyad_vec[1,])){
if(dyad_vec[i,j] == 1){
lt_samp <- rbind(lt_samp,c(dyad_vec[i,1],dyad_vec[i,2],j-2))
}
}
}
}
lt_samp <- matrix(0,1,3)
for(i in 1:n2){
if(dyad_vec[i,1] %in% node_set & dyad_vec[i,2] %in% node_set){
for(j in 3:length(dyad_vec[1,])){
if(dyad_vec[i,j] == 1){
lt_samp <- rbind(lt_samp,c(dyad_vec[i,1],dyad_vec[i,2],j-2))
}
}
}
}
lt_samp
333+395
Lazega_lawyer_network
333+396
lt_samp[-1,]
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
link_tracing_samp()
Lazega_lawyer_network
set.seed(202412)
###########################
## Link tracing sampling ##
###########################
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
set.seed(202412)
samp1 <- link_tracing_samp()
samp1 <- link_tracing_samp(init = 2)
samp1 <- link_tracing_samp(init = 1)
samp1
set.seed(202412)
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 3, w = 2)
samp1
set.seed(202412)
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 1, w = 2)
samp
samp1
# compute the basis network of 2-wave link tracing samples of Lazega
unique_dyads <- unique(samp1[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
unique_dyads_vec
# compute the basis network of 2-wave link tracing samples of Lazega
unique_dyads <- unique(samp1[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
# estimate ERGM model parameters using MPLE.
data_res <- est_ml(NetMat = samp1, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)
seed <- 202412
# estimate ERGM model parameters using MPLE.
data_res <- est_ml(NetMat = samp1, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)
data_res
# obtain the estimated theta for Lazega network
data_theta <- data_res$theta_est
summary_est(data_res)
# m indicates the number of repetitions
simulated_suff <- simulate_suffstats_Lazega(data = samp1, m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
data_theta
data=samp1
m = 10
theta <- data_res$theta_est
theta
# the default theta is the MPLE of the Lazega network data
reproduced_suff <- matrix(0,m,7)
seeds <- sample(1:9999999,m,replace = FALSE)
sim_suff <- matrix(0,m, 7)
unique_dyads <- unique(data[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
iter=1
seed <- seeds[iter]
reproduced <- samp_ml(theta, N = 71, mdim = 6,
mterm = 'other',intv = 3, H = 2, seed = seeds[iter],
basis_arguments = unique_dyads_vec)
simsamp <- reproduced$suff_stats
simsamp
reproduced_suff
simsamp[,3]
devtools::document()
# m indicates the number of repetitions
simulated_suff <- simulate_suffstats_Lazega(data = samp1, m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
draw_box_plot_Lazega(simulated_suff, obs)
devtools::document()
draw_box_plot_Lazega(simulated_suff, obs)
devtools::document()
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega(data = samp1) # compute the observed sufficient statistics from the Lazega network.
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega(net_data = samp1) # compute the observed sufficient statistics from the Lazega network.
draw_box_plot_Lazega(simulated_suff, obs)
obs
devtools::document()
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega(net_data = samp1) # compute the observed sufficient statistics from the link tracing samples.
draw_box_plot_Lazega(simulated_suff, obs)
695/729
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 1, w = 1)
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 1, w = 1)
194/739
samp1 <- link_tracing_samp(data = Lazega_lawyer_network,init = 5, w = 1)
403/739
# compute the basis network of 2-wave link tracing samples of Lazega
unique_dyads <- unique(samp1[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
# estimate ERGM model parameters using MPLE.
data_res <- est_ml(NetMat = samp1, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)
summary_est(data_res)
# m indicates the number of repetitions
simulated_suff <- simulate_suffstats_Lazega(data = samp1, m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega(net_data = samp1) # compute the observed sufficient statistics from the link tracing samples.
draw_box_plot_Lazega(simulated_suff, obs)
