library(RColorBrewer)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
k=3
node_colors=sample(col_vector, k)
node_colors
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(1234568)
uesthis::pakcage("RColorBrewer")
uesthis::use_pakcage("RColorBrewer")
usethis::use_pakcage("RColorBrewer")
usethis::use_package("RColorBrewer")
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(1234568)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 3  #number of layers
H <- 2
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'BER'
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
params[,c(3,6)] = 0
theta <- params[3,]
N <- 100
iter_max <- 30000
basis_arguments <- c(1, 20240308)
seed <- sample(1:9999999,M,replace = FALSE)
mlnet <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=20240306)
draw_mlnet(mlnet,N)
mlnet[,3]
draw_mlnet(mlnet$net,N)
devtools::load_all()
draw_mlnet(mlnet$net,N)
# library(ergm)
# library(GGally)
# library(latentnet)
# library(ggplot2)
# library(ggpubr)
# require(grid)
# library(reshape2)
library(sna)
draw_mlnet(mlnet$net,N)
# library(ergm)
library(GGally)
# library(latentnet)
library(ggplot2)
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(1234568)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 3  #number of layers
H <- 2
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'BER'
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
params[,c(3,6)] = 0
theta <- params[3,]
N <- 100
iter_max <- 30000
basis_arguments <- c(1, 20240308)
seed <- sample(1:9999999,M,replace = FALSE)
mlnet <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=20240306)
draw_mlnet(mlnet$net,N)
## Arrange all networks in one plot
ggarrange(plotlist = fig, ncol = 3, nrow = 1)
devtools::document()
devtools::load_all()
draw_mlnet(mlnet$net,N)
rm(list = ls())
#setwd("~/projects/mlnetseparable_no_arbitrary")
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
#setwd("~/projects/mlnetsep_simresults/LSM_ml")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test")
#setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
set.seed(1234568)
#set.seed(20230426)  ## Don't change the seed
M <- 1
sampRange <- seq(10,10,20)
sampSize <- length(sampRange)
n <- 10  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
k <- 3  #number of layers
H <- 2
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'BER'
intv <- 3
iter_max <- 30000
mu <- 0
std <- 1
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
params[,c(3,6)] = 0
theta <- params[3,]
N <- 100
iter_max <- 30000
basis_arguments <- c(1, 20240308)
seed <- sample(1:9999999,M,replace = FALSE)
mlnet <- er.simulate(theta,N = N, k = k, H = H ,mdim = mdim, seed=20240306)
draw_mlnet(mlnet$net,N)
devtools::load_all()
draw_mlnet(mlnet$net,N)
getwd()
rm(list = ls())
library("devtools")
devtools::document()
devtools::load_all()
## Sample a k-layer multilayer network
burnin <- 100
k <- 4  # number of layers
H <- 2  # highest order of interactions
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'SBM'  # generate stochastic block model basis
intv <- 3
iter_max <- 30000
# SBM parameters
prob <- 0.6
fixed_effect <- log(prob/(1-prob))
params <- matrix(runif(n*mdim,-1,1),n,mdim)
params[,c(3,6)] = 0
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[3,]
theta <- params[1,]
theta
N <- 100
iter_max <- 30000
# SBM parameters
B <- 3
p_within <- .25
p_between <- .01
set.seed(1234568)
set.seed(123456)
seed <- sample(1:9999999,1,replace = FALSE)
seed <- sample(1:9999999,1,replace = FALSE)
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
library("devtools")
devtools::document()
set.seed(123456)
## Parameter settings
burnin <- 100
k <- 4  # number of layers
H <- 2  # highest order of interactions
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'SBM'  # generate stochastic block model basis
intv <- 3
iter_max <- 30000
# SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100
iter_max <- 30000
seed <- sample(1:9999999,1,replace = FALSE)
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
draw_mlnet(mlnet$net,N)
mlnet
mlnet$net
devtools::document()
set.seed(123456)
## Parameter settings
burnin <- 100
k <- 4  # number of layers
H <- 2  # highest order of interactions
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'SBM'  # generate stochastic block model basis
intv <- 3
iter_max <- 30000
# SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100
iter_max <- 30000
seed <- sample(1:9999999,1,replace = FALSE)
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
draw_mlnet(mlnet$net,N)
rm(list = ls())
library("devtools")
devtools::document()
set.seed(123456)
## Parameter settings
burnin <- 100
k <- 4  # number of layers
H <- 2  # highest order of interactions
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'SBM'  # generate stochastic block model basis
intv <- 3
iter_max <- 30000
# SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100
iter_max <- 30000
seed <- sample(1:9999999,1,replace = FALSE)
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
draw_mlnet(mlnet$net,N)
## Estimate the parameters of the sampled multilayer network
estimates <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed, basis_arguments ,iter_max)
## Estimate the parameters of the sampled multilayer network
NetMat <- mlnet$net
estimates <- rcpp_estimate_model_ml_Hway(NetMat, samp_num,  burnin, intv, mdim, mterm, N, k,H, seed, basis_arguments ,iter_max)
devtools::document()
## Sample and estimate a multilayer network, by default it is
estimates <- sim_est(NetMat = mlnet$net, theta=theta, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
## Sample and estimate a multilayer network, by default it is
estimates <- est_ml(NetMat = mlnet$net, theta=theta, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
print(estimates)
rm(list = ls())
library("devtools")
devtools::document()
set.seed(123456)
## Parameter settings
burnin <- 100
k <- 4  # number of layers
H <- 2  # highest order of interactions
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'SBM'  # generate stochastic block model basis
intv <- 3
iter_max <- 30000
# SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100
iter_max <- 30000
seed <- sample(1:9999999,1,replace = FALSE)
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
draw_mlnet(mlnet$net,N)
## Sample and estimate a multilayer network, by default it is
estimates <- est_ml(NetMat = mlnet$net, theta=theta, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
print(estimates)
