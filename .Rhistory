for(j in c(2,3,6)){}
for(j in c(2,3,6)){print(j)}
sample(10,2)
randint(2)
sampel(c(2,3,4,5,6),3)
sample(c(2,3,4,5,6),3)
a = c(1,2,3)
a
a[-c(2)]
a = c(3,4,6,9)
a
a[-c(4)]
a
b = c(3,1)
a[-b]
append(a[-b],c(10,22))
data
devtools::document()
comp_indep_test(data)
comp_indep_test(data=data)
data = Lazega_lawyer_network, B = 100
data = Lazega_lawyer_network
B = 100
k <- max(data[,3])
N <- max(data)
unique_dyads <- unique(data[,1:2])
n2 <- length(unique_dyads[,1])
dyad_vec <- matrix(0,n2,k+2)
n1 <- length(data[,1])
ind1 <- data[1,1]
ind2 <- data[1,2]
dyad_ind <- 1
for(i in 1:n1){
if(ind1 == data[i,1] & ind2 == data[i,2]){
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
else{
dyad_ind <- dyad_ind + 1
ind1 <- data[i,1]
ind2 <- data[i,2]
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
#dyad_ind <- data[i,2] - data[i,1] + (N-1 + (N-data[i,1]+1)* (data[i,1]!=2)) * (data[i,1]-1) / (2/((data[i,1]==2)+1))  * (data[i,1]!=1)
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
}
dyad_vec
ip_dist <- list()
i=1
node1 <- dyad_vec[i,1]
node2 <- dyad_vec[i,2]
neighboring_inner_prod <- 0
non_neighboring_inner_prod <- rep(0,B)
neib_ind <- which(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2)
neib_ind
non_neib_ind <- which(!(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2))
non_neib_ind
j=1
j=2
sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
neighboring_inner_prod <- neighboring_inner_prod + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
neighboring_inner_prod
neighboring_inner_prod <- 0
non_neighboring_inner_prod <- rep(0,B)
neib_ind <- which(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2)
non_neib_ind <- which(!(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2))
for(j in neib_ind){
if(j == i) {next}
neighboring_inner_prod <- neighboring_inner_prod + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
}
neighboring_inner_prod
n3 <- length(neib_ind)
b=1
n4 <- sample(n3, 1)
n4
replaced_ind <- sample(neib_ind,n4)
replaced_ind
replacing_ind <- sample(non_neib_ind, n4)
replacing_ind
new_ind <- append(neib_ind[-replaced_ind],replacing_ind)
new_ind
for(j in new_ind){
non_neighboring_inner_prod[b] <- non_neighboring_inner_prod[b] + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
}
non_neighboring_inner_prod
for(b in 1:B){
n4 <- sample(n3, 1)
replaced_ind <- sample(neib_ind,n4)
replacing_ind <- sample(non_neib_ind, n4)
new_ind <- append(neib_ind[-replaced_ind],replacing_ind)
for(j in new_ind){
non_neighboring_inner_prod[b] <- non_neighboring_inner_prod[b] + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
}
}
non_neighboring_inner_prod
ip_dist[[i]] <- c(neighboring_inner_prod, non_neighboring_inner_prod)
ip_dist
devtools::document()
comp_indep_test()
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
#######################################
### Independence test for each dyad ###
#######################################
Lazega_ip <- comp_indep_test()
View(Lazega_ip)
Lazega_ip$ip_dist[[1]]
sort(Lazega_ip$ip_dist[[1]])
which(sort(Lazega_ip$ip_dist[[1]]) == Lazega_ip$ip_dist[[1]][1])
which(sort(Lazega_ip$ip_dist[[1]]) == Lazega_ip$ip_dist[[1]][1])[1]
hist(Lazega_ip$ip_dist[[1]])
?hist
x <- Lazega_ip$ip_dist[[1]]
range(x)
range(x)[2]-range(x)[1]
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1] )
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1] )
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )
x <- Lazega_ip$ip_dist[[2]]
min_pos <- which(sort(x) == x[1])[1]
hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )
ind <- 2
x <- Lazega_ip$ip_dist[[ind]]
min_pos <- which(sort(x) == x[ind])[1]
min_pos
hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )
ind <- 2
x <- Lazega_ip$ip_dist[[ind]]
min_pos <- which(sort(x) == x[1])[1]
which(sort(x) == x[1])
x
quant <- which(sort(x) == x[1])
ind <- 1
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )
ind <- 1
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = min_pos)
range(x)[2]-range(x)[1]+1
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1])
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
ind <- 2
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
ind <- 3
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
ind <- 3
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
#######################################
### Independence test for each dyad ###
#######################################
B <- 100
ind <- 3
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
ind <- 4
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
#######################################
### Independence test for each dyad ###
#######################################
B <- 1000
Lazega_ip <- comp_indep_test(B = B)
ind <- 4
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
ind <- 1
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
#######################################
### Independence test for each dyad ###
#######################################
B <- 1000
Lazega_ip <- comp_indep_test(B = B)
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
set.seed(123456)
#######################################
### Independence test for each dyad ###
#######################################
B <- 100
Lazega_ip <- comp_indep_test(B = B)
View(Lazega_ip)
Lazega_ip$ip_dist
ind <- 1
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
y1 <- Lazega_ip$neighboring_inner_prod[[ind]]
y2 <- Lazega_ip$non_neighboring_inner_prod[[ind]]
ks.test(y1,y2)
y1 <- Lazega_ip$neighboring_inner_prod[[ind]]
?lm
data = Lazega_lawyer_network
k <- max(data[,3])
N <- max(data)
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
?comp_indep_test_network
data = Lazega_lawyer_network
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
?comp_indep_test_network
data = Lazega_lawyer_network
k <- max(data[,3])
N <- max(data)
unique_dyads <- unique(data[,1:2])
n2 <- length(unique_dyads[,1])
dyad_vec <- matrix(0,n2,k+2)
n1 <- length(data[,1])
ind1 <- data[1,1]
ind2 <- data[1,2]
dyad_ind <- 1
# Form a matrix where each row is a dyad vector
for(i in 1:n1){
if(ind1 == data[i,1] & ind2 == data[i,2]){
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
else{
dyad_ind <- dyad_ind + 1
ind1 <- data[i,1]
ind2 <- data[i,2]
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
#dyad_ind <- data[i,2] - data[i,1] + (N-1 + (N-data[i,1]+1)* (data[i,1]!=2)) * (data[i,1]-1) / (2/((data[i,1]==2)+1))  * (data[i,1]!=1)
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
}
dyad_vec
ip_dist <- list()
neighboring_inner_prod <- rep(0,n2)
for(i in 1:n2){
node1 <- dyad_vec[i,1]
node2 <- dyad_vec[i,2]
non_neighboring_inner_prod <- rep(0,B)
neib_ind <- which(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2)
#non_neib_ind <- which(!(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2))
for(j in neib_ind){
if(j == i){next}
neighboring_inner_prod[i] <- neighboring_inner_prod[i] + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
}
}
neighboring_inner_prod <- rep(0,n2)
for(i in 1:n2){
node1 <- dyad_vec[i,1]
node2 <- dyad_vec[i,2]
#non_neighboring_inner_prod <- rep(0,B)
neib_ind <- which(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2)
#non_neib_ind <- which(!(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2))
for(j in neib_ind){
if(j == i){next}
neighboring_inner_prod[i] <- neighboring_inner_prod[i] + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
}
}
neighboring_inner_prod
mean(neighboring_inner_prod)
mean(c(1,2,3))
mean(c(1,2,3.6))
dyad_vec
nrows(dyad_vec)
nrow(dyad_vec)
sample(nrow(dyad_vec))
dyad_vec[sample(nrow(dyad_vec)),]
dyad_vec[sample(nrow(dyad_vec)),3:5]
dyad_vec[313:333,]
cbind(dyad_vec[,1:2])
cbind(dyad_vec[,1:2],dyad_vec[,3:5])
cbind(dyad_vec[,1:2],dyad_vec[sample(nrow(dyad_vec)),3:5])
dyad_vec[200,]
?sample
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
?comp_indep_test_network
comp_indep_test_network()
B = 100
data = Lazega_lawyer_network
k <- max(data[,3])
N <- max(data)
unique_dyads <- unique(data[,1:2])
n2 <- length(unique_dyads[,1])
dyad_vec <- matrix(0,n2,k+2)
n1 <- length(data[,1])
ind1 <- data[1,1]
ind2 <- data[1,2]
dyad_ind <- 1
# Form a matrix where each row is a dyad vector
for(i in 1:n1){
if(ind1 == data[i,1] & ind2 == data[i,2]){
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
else{
dyad_ind <- dyad_ind + 1
ind1 <- data[i,1]
ind2 <- data[i,2]
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
#dyad_ind <- data[i,2] - data[i,1] + (N-1 + (N-data[i,1]+1)* (data[i,1]!=2)) * (data[i,1]-1) / (2/((data[i,1]==2)+1))  * (data[i,1]!=1)
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
}
dyad_vec
TC <- rep(0,B+1) # list of test statistics
## test statistic from the observation
neighboring_inner_prod <- rep(0,n2)
# sum of neighboring inner products for each activated dyads
for(i in 1:n2){
node1 <- dyad_vec[i,1]
node2 <- dyad_vec[i,2]
#non_neighboring_inner_prod <- rep(0,B)
neib_ind <- which(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2)
#non_neib_ind <- which(!(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2))
for(j in neib_ind){
if(j == i){next}
neighboring_inner_prod[i] <- neighboring_inner_prod[i] + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
}
}
TC[1] <- mean(neighboring_inner_prod)
j=1
neighboring_inner_prod <- rep(0,n2)
permuted_dyad <- cbind(dyad_vec[,1:2],dyad_vec[sample(nrow(dyad_vec)),3:5])
permuted_dyad == dyad_vec
i=1
node1 <- permuted_dyad[i,1]
node2 <- permuted_dyad[i,2]
neib_ind <- which(permuted_dyad[,1] == node1 | permuted_dyad[,1] == node2 | permuted_dyad[,2] == node1 | permuted_dyad[,2] == node2)
neib_ind
neib_ind <- which(permuted_dyad[,1] == node1 | permuted_dyad[,1] == node2 | permuted_dyad[,2] == node1 | permuted_dyad[,2] == node2)
b=1
j=1
if(j == i){next}
j == i
j=2
j == i
neighboring_inner_prod[i] <- neighboring_inner_prod[i] + sum(permuted_dyad[i,3:5] * permuted_dyad[j,3:5])
neighboring_inner_prod
permuted_dyad[i,3:5] * permuted_dyad[j,3:5]
j=3
permuted_dyad[i,3:5] * permuted_dyad[j,3:5]
neighboring_inner_prod[i] <- neighboring_inner_prod[i] + sum(permuted_dyad[i,3:5] * permuted_dyad[j,3:5])
neighboring_inner_prod
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
comp_indep_test_network()
x <- comp_indep_test_network(B = B)
quant <- which(sort(x) == x[1])
#######################################
### Independence test for each dyad ###
#######################################
B <- 100
x <- comp_indep_test_network(B = B)
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
range(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
range(x)[2]-range(x)[1]+1
ceiling((2.5))
ceiling(2.5)
ceiling(2.1)
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=ceiling(range(x)[2]-range(x)[1]+1) )+
geom_vline(xintercept = x[1],col = "red")
#######################################
### Independence test for each dyad ###
#######################################
B <- 1000
x <- comp_indep_test_network(B = B)
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=ceiling(range(x)[2]-range(x)[1]+1) )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
