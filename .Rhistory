sampRange <- seq(2000,2000,4000) ## number of activated dyads
sampRange
sampRange <- seq(2000,1000,4000) ## number of activated dyads
sampRange <- seq(2000,4000,2000) ## number of activated dyads
sampSize <- length(sampRange)
N <- 100
n <- M  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
H <- 2
k <- 3  #number of layers
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'other'
intv <- 3
thetas <- matrix(runif(n*mdim,-1,1),n,mdim)
thetas[,c(3,6)] = 0
library(parallel)
library(parallel)
tic <- Sys.time()
for (i in 1:sampSize){
num_dyads <- sampRange[i]
basis_arguments <- generate_basis(1:N, num_dyads)
subpath <-paste0("dyads_", num_dyads)
dir.create(subpath)
setwd(subpath)
dir.create("results")
dir.create("out")
seeds <- sample(1:9999999,M,replace = FALSE)
sim10_res <- mclapply(1:M,
sim_est_wrapper,
thetas <- thetas,
N <- N,
samp_num <- samp_num,
burnin <- burnin,
k <- k,
H <- H,
mdim <- mdim,
mterm <- mterm,
intv <- intv,
seeds <- seeds,
iter_max <- iter_max,
basis_arguments <- basis_arguments,
mc.cores = 1)
save(sim10_res, file = "results/res_summary.rda")
closeAllConnections()
setwd("..")
}
toc <- Sys.time()
time = as.numeric(difftime(toc, tic, units = "secs"))
time
load("C:/Users/ljhhe/OneDrive - Florida State University/Research/Simulation/local test/dyads_4000/results/res_summary.rda")
sim10_res
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
devtools::load_all()
## Don't change the seed
set.seed(05232024)
seed <- sample(1:9999999,1,replace = FALSE)
n <- 1 # set of parameters
samp_num <- 1
burnin <- 100
k <- 4  #number of layers
H <- 2
num_of_dyads <- 2000
N <- 100
N <- 100
num_of_dyads <- 2000
gy <- num_of_dyads / choose(N,2)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'other'
intv <- 3
iter_max <- 30000
params <- matrix(runif(n*mdim,-1,1),n,mdim)
params[,c(3,6)] = 0 # fix two dimensions to 0
theta <- params[1,]
theta
basis_arguments <- generate_basis(1:N,num_of_dyads)
basis_arguments
## Start to verify the sampling by matching observed and expected sufficient statistics
list_of_layers = list()
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
for(i in 1:k){
list_of_layers = append(list_of_layers,list(c(0,1)))
}
X <- expand.grid(list_of_layers)
X <- X[-1,]
## calculate the sufficient stats for each higher order dimension
## If K = 4, H = 2
X[,(k+1):mdim] = 0
X[3,5] = 1
X[5,6] = 1
X[6,8] = 1
X[7,5:6] = 1
X[7,8] = 1
X[9,7] = 1
X[10, 9] = 1
X[11,5] = 1
X[11, 7] = 1
X[11,9] = 1
X[12,c(10)] = 1
X[13, c(6,7,10)] = 1
X[14, c(8,9,10)] = 1
X[15, (k+1):mdim] = 1
X
(S <- t(matrix(unlist(X),ncol = 2^k-1,byrow = TRUE)))
Z <- exp(S %*% theta)
prob <- rep(0,mdim)
Es <- rep(0,mdim)
Es
for(i in c(1:(2^k-1))){
prob <- prob + S[i,] * Z[i]/sum(Z)
}
(Es <- round(prob * choose(N,2) * gy))
res <- sim_est(theta, N, samp_num, burnin, k, H, mdim, mterm, intv = 3,
seed, iter_max = 30000, basis_arguments)
res$RL2err
theta
(sampled <- colSums(res$suff_matrix)[3:(mdim+2)])
res$suff_matrix
View(res)
(sampled <- colSums(res[[4]])[3:(mdim+2)])
norm(Es - sampled,"2")/norm(Es,"2")
Rs
Es
choose(100,2)
choose(200,2)
choose(1000,2)
choose(500,2)
sampRange <- seq(1000,100000,10000) ## number of activated dyads
sampRange
choose(200,2)
sampRange <- seq(1000,10000,1000) ## number of activated dyads
sampRange
choose(300,2)
sampRange <- seq(3000,30000,3000) ## number of activated dyads
sampRange
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
set.seed(20230426)  ## Don't change the seed
iter_max <- 30000
M <- 250
sampRange <- seq(3000,30000,3000) ## number of activated dyads
sampSize <- length(sampRange)
N <- 300
n <- M  ## the number of parameters you want to simulate, can be any integer
samp_num <- 1
burnin <- 100
H <- 2
k <- 3  #number of layers
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'other'
intv <- 3
thetas <- matrix(runif(n*mdim,-1,1),n,mdim)
thetas[,c(3,6)] = 0
thetas
i=10
num_dyads <- sampRange[i]
basis_arguments <- generate_basis(1:N, num_dyads)
basis_arguments
generate_pairs <- function(n_pairs, range_start, range_end) {
pairs <- vector("list", n_pairs)
for (i in 1:n_pairs) {
pair <- sample(range_start:range_end, 2)
while (length(unique(unlist(pairs))) < i * 2 && pair %in% unlist(pairs)) {
pair <- sample(range_start:range_end, 2)
}
pairs[[i]] <- pair
}
return(pairs)
}
# Example usage
set.seed(123)  # For reproducibility
pairs <- generate_pairs(5, 1, 10)
pairs
generate_pairs <- function(n_pairs, range_start, range_end) {
pairs <- vector("list", n_pairs)
for (i in 1:n_pairs) {
pair <- sample(range_start:range_end, 2)
while (length(unique(unlist(pairs))) < i * 2 && pair %in% unlist(pairs)) {
pair <- sample(range_start:range_end, 2)
}
pairs[[i]] <- pair
}
return(pairs)
}
# Example usage
set.seed(123)  # For reproducibility
pairs <- generate_pairs(5, 1, 10)
generate_pairs <- function(n_pairs, range_start, range_end) {
pairs <- vector("list", n_pairs)
for (i in 1:n_pairs) {
pair <- sample(range_start:range_end, 2)
while ((length(unique(unlist(pairs))) < i * 2) && pair %in% unlist(pairs)) {
pair <- sample(range_start:range_end, 2)
}
pairs[[i]] <- pair
}
return(pairs)
}
# Example usage
set.seed(123)  # For reproducibility
pairs <- generate_pairs(5, 1, 10)
n_pairs = 5
range_start=1
range_end=10
pairs <- vector("list", n_pairs)
i=1
pair <- sample(range_start:range_end, 2)
pair
length(unique(unlist(pairs)))
pairs
unlist(pairs)
i * 2
length(unique(unlist(pairs))) < i * 2
pairs
length(unique(unlist(pairs))) < i * 2 && pair %in% unlist(pairs)
unlist(pairs)
pair %in% unlist(pairs)
# Function to generate distinct pairs of integers
generate_pairs <- function(n_pairs, range_start, range_end) {
pairs <- vector("list", n_pairs)
all_numbers <- range_start:range_end
for (i in 1:n_pairs) {
pair <- sample(all_numbers, 2)
while (pair %in% pairs) {
pair <- sample(all_numbers, 2)
}
pairs[[i]] <- pair
}
return(pairs)
}
# Example usage
set.seed(123)  # For reproducibility
pairs <- generate_pairs(5, 1, 10)
pairs
# Function to generate distinct pairs of integers
generate_pairs <- function(n_pairs, range_start, range_end) {
pairs <- vector("list", n_pairs)
all_numbers <- range_start:range_end
for (i in 1:n_pairs) {
pair <- sample(all_numbers, 2)
while (pair %in% pairs) {
pair <- sample(all_numbers, 2)
}
pairs[[i]] <- pair
}
return(pairs)
}
# Example usage
set.seed(123)  # For reproducibility
pairs <- generate_pairs(5, 1, 10)
# Function to sample n unique pairs from the pool 1 to 100
sample_unique_pairs <- function(n, pool_size = 100) {
pairs <- list()
while (length(pairs) < n) {
pair <- sort(sample(1:pool_size, 2))
if (!any(sapply(pairs, function(x) all(x == pair)))) {
pairs <- c(pairs, list(pair))
}
}
return(do.call(rbind, pairs))
}
# Sample 10 unique pairs
sampled_pairs <- sample_unique_pairs(10)
# Display the sampled pairs
print(sampled_pairs)
# Sample 10 unique pairs
sampled_pairs <- sample_unique_pairs(1000, 300)
# Display the sampled pairs
print(sampled_pairs)
choose(30,2)
# Sample 10 unique pairs
sampled_pairs <- sample_unique_pairs(100, 30)
# Display the sampled pairs
print(sampled_pairs)
?all
pairs <- list()
n=10
length(pairs)
pool_size = 100
pair <- sort(sample(1:pool_size, 2))
pair
?sapply
pair
pairs
pairs == pair
all(x == pair)
all(pairs == pair)
pair
?all
pairs == pair
all(pairs == pair)
if(pairs == pair){a=1}
if(pairs == pair)
{}
if(pairs == pair){print(1)}
sampled_pairs
as.vector(sampled_pairs)
as.vector(t(sampled_pairs))
pair
if (!any(sapply(pairs, function(x) all(x == pair)))) {
pairs <- c(pairs, list(pair))
}
pairs
length(pairs)
pair <- sort(sample(1:pool_size, 2))
pair
all(pairs == pair)
pair
pairs
pairs == pair
function(x) all(x == pair)
f = function(x) all(x == pair)
f
f(pairs)
?sapply
sapply(pairs, function(x) all(x == pair))
any(sapply(pairs, function(x) all(x == pair)))
pairs <- c(pairs, list(pair))
pairs
pair <- c(72,86)
pair
sapply(pairs, function(x) all(x == pair))
pairs == pair
all(pairs == pair)
f
sapply(pairs,f)
any(sapply(pairs,f))
pairs <-c(72,79)
sapply(pairs, function(x) all(x == pair))
!any(sapply(pairs, function(x) all(x == pair)))
# Sample 10 unique pairs
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs(100, 30)
toc <- Sys.time()
(time1 = as.numeric(difftime(toc, tic, units = "secs")))
# Sample unique pairs method 1
N <- 300
num_dyads <- 10000
N <- 300
num_dyads <- 10000
# Sample unique pairs method 1
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs(N, num_dyads)
toc <- Sys.time()
(time1 = as.numeric(difftime(toc, tic, units = "secs")))
# Sample unique pairs - method 2
tic <- Sys.time()
sampled_pairs <- generate_basis(1:N, num_dyads)
choose(30,2)
N <- 100
num_dyads <- 1000
# Sample unique pairs method 1
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs(N, num_dyads)
toc <- Sys.time()
(time1 = as.numeric(difftime(toc, tic, units = "secs")))
# Sample unique pairs - method 2
tic <- Sys.time()
sampled_pairs <- generate_basis(1:N, num_dyads)
toc <- Sys.time()
(time2 = as.numeric(difftime(toc, tic, units = "secs")))
# Function to sample n unique pairs from the pool 1 to 100
sample_unique_pairs <- function(n, pool_size = 100) {
pairs <- list()
while (length(pairs) < n) {
pair <- sort(sample(1:pool_size, 2))
if (!any(sapply(pairs, function(x) all(x == pair)))) {
pairs <- c(pairs, list(pair))
}
}
return(as.vector(t(do.call(rbind, pairs))))
}
N <- 100
N <- 10
num_dyads <- 10
sampled_pairs <- sample_unique_pairs(N, num_dyads)
sampled_pairs
num_dyads <- 20
sampled_pairs <- sample_unique_pairs(N, num_dyads)
sampled_pairs
num_dyads <- 20
sampled_pairs <- sample_unique_pairs(N, num_dyads)
sampled_pairs
length(sampled_pairs)
choose(10,2)
num_dyads <- 10
sampled_pairs <- sample_unique_pairs(N, num_dyads)
length(sampled_pairs)
N <- 10
num_dyads <- 10
# Sample unique pairs method 1
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs(num_dyads,N)
toc <- Sys.time()
(time1 = as.numeric(difftime(toc, tic, units = "secs")))
# Sample unique pairs - method 2
tic <- Sys.time()
sampled_pairs <- generate_basis(1:N, num_dyads)
toc <- Sys.time()
(time2 = as.numeric(difftime(toc, tic, units = "secs")))
N <- 100
num_dyads <- 100
# Sample unique pairs method 1
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs(num_dyads,N)
toc <- Sys.time()
(time1 = as.numeric(difftime(toc, tic, units = "secs")))
# Sample unique pairs - method 2
tic <- Sys.time()
sampled_pairs <- generate_basis(1:N, num_dyads)
toc <- Sys.time()
(time2 = as.numeric(difftime(toc, tic, units = "secs")))
N <- 100
num_dyads <- 1000
# Sample unique pairs method 1
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs(num_dyads,N)
toc <- Sys.time()
(time1 = as.numeric(difftime(toc, tic, units = "secs")))
# Sample unique pairs - method 2
tic <- Sys.time()
sampled_pairs <- generate_basis(1:N, num_dyads)
toc <- Sys.time()
(time2 = as.numeric(difftime(toc, tic, units = "secs")))
choose(100,2)
N <- 300
num_dyads <- 10000
# Sample unique pairs method 1
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs(num_dyads,N)
toc <- Sys.time()
(time1 = as.numeric(difftime(toc, tic, units = "secs")))
# Sample unique pairs - method 2
tic <- Sys.time()
sampled_pairs <- generate_basis(1:N, num_dyads)
toc <- Sys.time()
(time2 = as.numeric(difftime(toc, tic, units = "secs")))
# Function to sample n unique pairs from the pool 1 to 100
sample_unique_pairs2 <- function(n, pool_size = 100) {
pairs_set <- set()
while (length(pairs_set) < n) {
pair <- sort(sample(1:pool_size, 2))
pair_str <- paste(pair, collapse = ",")
pairs_set[pair_str] <- pair
}
# Convert the set back to a matrix
pairs_matrix <- do.call(rbind, pairs_set)
return(as.numeric(pairs_matrix))
}
N <- 300
num_dyads <- 10000
# Sample unique pairs method 1
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs(num_dyads,N)
toc <- Sys.time()
(time1 = as.numeric(difftime(toc, tic, units = "secs")))
# Sample unique pairs method 3
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs2(num_dyads,N)
library(sets)
# Function to sample n unique pairs from the pool 1 to 100
sample_unique_pairs2 <- function(n, pool_size = 100) {
pairs_set <- set()
while (length(pairs_set) < n) {
pair <- sort(sample(1:pool_size, 2))
pair_str <- paste(pair, collapse = ",")
pairs_set[pair_str] <- pair
}
# Convert the set back to a matrix
pairs_matrix <- do.call(rbind, pairs_set)
return(as.numeric(pairs_matrix))
}
# Sample unique pairs method 3
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs2(num_dyads,N)
install.packages('sets')
library(sets)
# Sample unique pairs method 3
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs2(num_dyads,N)
N <- 300
num_dyads <- 1000
# Sample unique pairs method 1
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs(num_dyads,N)
toc <- Sys.time()
(time1 = as.numeric(difftime(toc, tic, units = "secs")))
# Sample unique pairs method 3
tic <- Sys.time()
sampled_pairs <- sample_unique_pairs2(num_dyads,N)
basis_arguments <- generate_basis(num_dyads,N)
basis_arguments
devtools::document()
basis_arguments <- generate_basis(num_dyads,N)
basis_arguments
