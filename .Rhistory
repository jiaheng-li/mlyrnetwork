dyad_vec <- matrix(0,n2,k+2)
n1 <- length(data[,1])
ind1 <- data[1,1]
ind2 <- data[1,2]
dyad_ind <- 1
for(i in 1:n1){
if(ind1 == data[i,1] & ind2 == data[i,2]){
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
else{
dyad_ind <- dyad_ind + 1
ind1 <- data[i,1]
ind2 <- data[i,2]
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
#dyad_ind <- data[i,2] - data[i,1] + (N-1 + (N-data[i,1]+1)* (data[i,1]!=2)) * (data[i,1]-1) / (2/((data[i,1]==2)+1))  * (data[i,1]!=1)
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
}
dyad_vec
data
View(data)
View(data)
data = matrix(c(1,2,1,1,2,3),ncol = 3)
data
?matrix
data = matrix(c(1,2,1,1,2,3),ncol = 3,byrow = TRUE)
data
data = matrix(c(1,2,1,1,2,3,2,3,1,2,3,2,2,3,3,2,4,3,3,4,2),ncol = 3,byrow = TRUE)
data
comp_inner_prod(data)
1/0
k <- max(data[,3])
N <- max(data)
unique_dyads <- unique(data[,1:2])
n2 <- length(unique_dyads[,1])
dyad_vec <- matrix(0,n2,k+2)
n1 <- length(data[,1])
ind1 <- data[1,1]
ind2 <- data[1,2]
dyad_ind <- 1
for(i in 1:n1){
if(ind1 == data[i,1] & ind2 == data[i,2]){
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
else{
dyad_ind <- dyad_ind + 1
ind1 <- data[i,1]
ind2 <- data[i,2]
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
#dyad_ind <- data[i,2] - data[i,1] + (N-1 + (N-data[i,1]+1)* (data[i,1]!=2)) * (data[i,1]-1) / (2/((data[i,1]==2)+1))  * (data[i,1]!=1)
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
}
neighboring_inner_prod <- rep(0,n2)
non_neighboring_inner_prod <- rep(0,n2)
for(i in 1:n2){
node1 <- dyad_vec[i,1]
node2 <- dyad_vec[i,2]
iter1 <- 0
iter2 <- 0
for(j in 1:n2){
if(j==i){next}
else if(dyad_vec[j,1] == node1 | dyad_vec[j,1] == node2 | dyad_vec[j,2] == node1 | dyad_vec[j,2] == node2){
neighboring_inner_prod[i] <- neighboring_inner_prod[i] + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
iter1 <- iter1 + 1
}
else{
non_neighboring_inner_prod[i] <- non_neighboring_inner_prod[i] + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
iter2 <- iter2 + 1
}
}
neighboring_inner_prod[i] <- neighboring_inner_prod[i] / iter1
non_neighboring_inner_prod[i] <- non_neighboring_inner_prod[i] / iter2
}
non_neighboring_inner_prod
dyad_vec
0/0
a = list()
a
append(a,1)
a
a = append(a,1)
a
append(a,2)
a=c(0,1)
a
append(a,3)
a=c()
a
a=append(a,1)
a
devtools::document()
comp_dyad_inner_prod(data)
devtools::document()
comp_dyad_inner_prod(data)
data
k <- max(data[,3])
N <- max(data)
unique_dyads <- unique(data[,1:2])
n2 <- length(unique_dyads[,1])
dyad_vec <- matrix(0,n2,k+2)
n1 <- length(data[,1])
ind1 <- data[1,1]
ind2 <- data[1,2]
dyad_ind <- 1
for(i in 1:n1){
if(ind1 == data[i,1] & ind2 == data[i,2]){
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
else{
dyad_ind <- dyad_ind + 1
ind1 <- data[i,1]
ind2 <- data[i,2]
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
#dyad_ind <- data[i,2] - data[i,1] + (N-1 + (N-data[i,1]+1)* (data[i,1]!=2)) * (data[i,1]-1) / (2/((data[i,1]==2)+1))  * (data[i,1]!=1)
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
}
neighboring_inner_prod <- c()
non_neighboring_inner_prod <- c()
nip_list <- list()
non_nip_list <- list()
i=1
node1 <- dyad_vec[i,1]
node2 <- dyad_vec[i,2]
iter1 <- 0
iter2 <- 0
j=1
j==i
j=2
dyad_vec
dyad_vec[j,1] == node1 | dyad_vec[j,1] == node2 | dyad_vec[j,2] == node1 | dyad_vec[j,2] == node2
sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
neighboring_inner_prod[i] <- append(neighboring_inner_prod[i], sum(dyad_vec[i,3:5] * dyad_vec[j,3:5]))
neighboring_inner_prod
j=3
dyad_vec[j,1] == node1 | dyad_vec[j,1] == node2 | dyad_vec[j,2] == node1 | dyad_vec[j,2] == node2
a = c(1)
a
append(a,3)
a
append(a,2)
a = append(a,2)
a
a = append(a,3)
a
append(a[1],3)
devtools::document()
comp_dyad_inner_prod(data)
L = list()
L <- append(L,c(1,2,3))
L
L = list()
L
L[1]
L[2]
L[1]
L[1] <- c(1,2,3)
L
L[[1]]
L[[1]] <- c(1,2,3)
L
L[[2]] <- c(1,2,3,5)
L
devtools::document()
comp_dyad_inner_prod(data)
devtools::document()
comp_dyad_inner_prod(data)
Lazega_ip <- comp_dyad_inner_prod()
View(Lazega_ip)
View(Lazega_ip)
View(Lazega_ip)
Lazega_ip$neighboring_inner_prod
Lazega_ip$neighboring_inner_prod[1]
Lazega_ip$neighboring_inner_prod[[1]]
ind <- 1
y1 <- Lazega_ip$neighboring_inner_prod[[ind]]
y2 <- Lazega_ip$non_neighboring_inner_prod[[ind]]
ks.test(y1,y2)
plot(ecdf(y1),
xlim = range(c(y1, y2)),
col = "blue")
plot(ecdf(y2),
add = TRUE,
lty = "dashed",
col = "red")
range(c(y1, y2))
y2
ind <- 2
y1 <- Lazega_ip$neighboring_inner_prod[[ind]]
y2 <- Lazega_ip$non_neighboring_inner_prod[[ind]]
ks.test(y1,y2)
plot(ecdf(y1),
xlim = range(c(y1, y2)),
col = "blue")
plot(ecdf(y2),
add = TRUE,
lty = "dashed",
col = "red")
ind <- 3
y1 <- Lazega_ip$neighboring_inner_prod[[ind]]
y2 <- Lazega_ip$non_neighboring_inner_prod[[ind]]
ks.test(y1,y2)
plot(ecdf(y1),
xlim = range(c(y1, y2)),
col = "blue")
plot(ecdf(y2),
add = TRUE,
lty = "dashed",
col = "red")
range(c(y1, y2)
range(c(y1, y2))
range(c(y1, y2))
ind <- 4
y1 <- Lazega_ip$neighboring_inner_prod[[ind]]
y2 <- Lazega_ip$non_neighboring_inner_prod[[ind]]
ks.test(y1,y2)
plot(ecdf(y1),
xlim = range(c(y1, y2)),
col = "blue")
plot(ecdf(y2),
add = TRUE,
lty = "dashed",
col = "red")
range(c(y1, y2))
ind <- 2
y1 <- Lazega_ip$neighboring_inner_prod[[ind]]
y2 <- Lazega_ip$non_neighboring_inner_prod[[ind]]
ks.test(y1,y2)
plot(ecdf(y1),
xlim = range(c(y1, y2)),
col = "blue")
plot(ecdf(y2),
add = TRUE,
lty = "dashed",
col = "red")
range(c(y1, y2))
dyad_vec
which(dyad_vec[,1]==1)
which(dyad_vec[,1]==2)
which(dyad_vec[,1]==node1 | dyad_vec[,1] == node2)
which(!(dyad_vec[,1]==node1 | dyad_vec[,1] == node2))
for(j in c(2,3,6)){}
for(j in c(2,3,6)){print(j)}
sample(10,2)
randint(2)
sampel(c(2,3,4,5,6),3)
sample(c(2,3,4,5,6),3)
a = c(1,2,3)
a
a[-c(2)]
a = c(3,4,6,9)
a
a[-c(4)]
a
b = c(3,1)
a[-b]
append(a[-b],c(10,22))
data
devtools::document()
comp_indep_test(data)
comp_indep_test(data=data)
data = Lazega_lawyer_network, B = 100
data = Lazega_lawyer_network
B = 100
k <- max(data[,3])
N <- max(data)
unique_dyads <- unique(data[,1:2])
n2 <- length(unique_dyads[,1])
dyad_vec <- matrix(0,n2,k+2)
n1 <- length(data[,1])
ind1 <- data[1,1]
ind2 <- data[1,2]
dyad_ind <- 1
for(i in 1:n1){
if(ind1 == data[i,1] & ind2 == data[i,2]){
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
else{
dyad_ind <- dyad_ind + 1
ind1 <- data[i,1]
ind2 <- data[i,2]
dyad_vec[dyad_ind,1] <- ind1
dyad_vec[dyad_ind,2] <- ind2
#dyad_ind <- data[i,2] - data[i,1] + (N-1 + (N-data[i,1]+1)* (data[i,1]!=2)) * (data[i,1]-1) / (2/((data[i,1]==2)+1))  * (data[i,1]!=1)
dyad_vec[dyad_ind,data[i,3]+2] <- 1
}
}
dyad_vec
ip_dist <- list()
i=1
node1 <- dyad_vec[i,1]
node2 <- dyad_vec[i,2]
neighboring_inner_prod <- 0
non_neighboring_inner_prod <- rep(0,B)
neib_ind <- which(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2)
neib_ind
non_neib_ind <- which(!(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2))
non_neib_ind
j=1
j=2
sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
neighboring_inner_prod <- neighboring_inner_prod + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
neighboring_inner_prod
neighboring_inner_prod <- 0
non_neighboring_inner_prod <- rep(0,B)
neib_ind <- which(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2)
non_neib_ind <- which(!(dyad_vec[,1] == node1 | dyad_vec[,1] == node2 | dyad_vec[,2] == node1 | dyad_vec[,2] == node2))
for(j in neib_ind){
if(j == i) {next}
neighboring_inner_prod <- neighboring_inner_prod + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
}
neighboring_inner_prod
n3 <- length(neib_ind)
b=1
n4 <- sample(n3, 1)
n4
replaced_ind <- sample(neib_ind,n4)
replaced_ind
replacing_ind <- sample(non_neib_ind, n4)
replacing_ind
new_ind <- append(neib_ind[-replaced_ind],replacing_ind)
new_ind
for(j in new_ind){
non_neighboring_inner_prod[b] <- non_neighboring_inner_prod[b] + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
}
non_neighboring_inner_prod
for(b in 1:B){
n4 <- sample(n3, 1)
replaced_ind <- sample(neib_ind,n4)
replacing_ind <- sample(non_neib_ind, n4)
new_ind <- append(neib_ind[-replaced_ind],replacing_ind)
for(j in new_ind){
non_neighboring_inner_prod[b] <- non_neighboring_inner_prod[b] + sum(dyad_vec[i,3:5] * dyad_vec[j,3:5])
}
}
non_neighboring_inner_prod
ip_dist[[i]] <- c(neighboring_inner_prod, non_neighboring_inner_prod)
ip_dist
devtools::document()
comp_indep_test()
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
#usethis::use_package("expm")
library("devtools")
devtools::document()
#######################################
### Independence test for each dyad ###
#######################################
Lazega_ip <- comp_indep_test()
View(Lazega_ip)
Lazega_ip$ip_dist[[1]]
sort(Lazega_ip$ip_dist[[1]])
which(sort(Lazega_ip$ip_dist[[1]]) == Lazega_ip$ip_dist[[1]][1])
which(sort(Lazega_ip$ip_dist[[1]]) == Lazega_ip$ip_dist[[1]][1])[1]
hist(Lazega_ip$ip_dist[[1]])
?hist
x <- Lazega_ip$ip_dist[[1]]
range(x)
range(x)[2]-range(x)[1]
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1] )
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1] )
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )
x <- Lazega_ip$ip_dist[[2]]
min_pos <- which(sort(x) == x[1])[1]
hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )
ind <- 2
x <- Lazega_ip$ip_dist[[ind]]
min_pos <- which(sort(x) == x[ind])[1]
min_pos
hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )
ind <- 2
x <- Lazega_ip$ip_dist[[ind]]
min_pos <- which(sort(x) == x[1])[1]
which(sort(x) == x[1])
x
quant <- which(sort(x) == x[1])
ind <- 1
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )
ind <- 1
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = min_pos)
range(x)[2]-range(x)[1]+1
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1])
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
ind <- 2
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
ind <- 3
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
ind <- 3
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
#######################################
### Independence test for each dyad ###
#######################################
B <- 100
ind <- 3
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
ind <- 4
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
#######################################
### Independence test for each dyad ###
#######################################
B <- 1000
Lazega_ip <- comp_indep_test(B = B)
ind <- 4
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
ind <- 1
x <- Lazega_ip$ip_dist[[ind]]
quant <- which(sort(x) == x[1])
min_pos <- quant[1]
max_pos <- quant[length(quant)]
#hist(x)
data_frame <- data.frame(x)
ggplot( data_frame, aes( x= x ) ) +
geom_histogram( bins=range(x)[2]-range(x)[1]+1 )+
geom_vline(xintercept = x[1],col = "red")
print(min_pos/B)
print(max_pos/B)
