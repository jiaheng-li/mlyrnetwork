simnet <- reproduced$net
sim_suff[iter,] <- simsamp[,3]
work_sim <- matrix(0,N,N)
adv_sim <- matrix(0,N,N)
friend_sim <- matrix(0,N,N)
for(r in c(1:length(simnet[,1]))){
row <- simnet[r,1]
col <- simnet[r,2]
layer <- simnet[r,3]
if(layer == 1){
work_sim[row,col] <- 1
}
if(layer == 2){
adv_sim[row,col] <- 1
}
if(layer == 3){
friend_sim[row,col] <- 1
}
}
## Calculate the triangle statistic of simulated network
#
# for(i in c(1:(N-2))){
#   for (j in c((i+1):(N-1))){
#     for (h in c((j+1):N)){
#       adv_tri_sim[iter] <- adv_tri_sim[iter] + as.integer(adv_sim[i,j] == 1 && adv_sim[i,h] == 1 && adv_sim[j,h] == 1)
#       friend_tri_sim[iter] <- friend_tri_sim[iter] + as.integer(friend_sim[i,j] == 1 && friend_sim[i,h] == 1 && friend_sim[j,h] == 1)
#       work_tri_sim[iter] <- work_tri_sim[iter] + as.integer(work_sim[i,j] == 1 && work_sim[i,h] == 1 && work_sim[j,h] == 1)
#     }
#
#   }
# }
}
#avg_simsuff[m] <- norm(colMeans(sim_suff) - data_suff,"2")/norm(data_suff,"2")
}
simsamp
simsamp[,3]
sim_suff
## Add example data (Lazega) to the package
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
adv <- read.table("C:/Users/ljhhe/OneDrive - Florida State University/Research/Applications/Lazega/LazegaLawyers/ELadv.dat")
friend <- read.table("C:/Users/ljhhe/OneDrive - Florida State University/Research/Applications/Lazega/LazegaLawyers/ELfriend.dat")
work <- read.table("C:/Users/ljhhe/OneDrive - Florida State University/Research/Applications/Lazega/LazegaLawyers/ELwork.dat")
N <- length(adv[,1])
mlnetwork <- matrix(0,1,3)
worksym <- matrix(0,N,N)
advsym <- matrix(0,N,N)
friendsym <- matrix(0,N,N)
### Create symmetric adjacent matrix
## work = 1
## advice = 2
## friend = 3
for(i in c(1:(N-1))){
for(j in c((i + 1):N)){
if(work[i,j] == 1 && work[j,i] == 1){
mlnetwork <- rbind(mlnetwork,c(i,j,1))
worksym[i,j] = 1
worksym[j,i] = 1
}
if(adv[i,j] == 1 && adv[j,i] == 1){
mlnetwork <- rbind(mlnetwork,c(i,j,2))
advsym[i,j] = 1
advsym[j,i] = 1
}
if(friend[i,j] == 1 && friend[j,i] == 1){
mlnetwork <- rbind(mlnetwork,c(i,j,3))
friendsym[i,j] = 1
friendsym[j,i] = 1
}
}
}
suff <- reproduced$suff_stats
nn <- 10
## Goodness of Fit ##
s1 <- sum(as.integer(mlnetwork[,3] == 1))
s2 <- sum(as.integer(mlnetwork[,3] == 2))
s3 <- sum(as.integer(mlnetwork[,3] == 3))
suff_mat <- matrix(0,choose(N,2),7) ## matrix of sufficient statistics for each dyad: number of edges \times dimension
for(i in c(1:(N-1))){
for(j in c((i + 1):N)){
m <- ((N-1)+(N-i+1))*(i-1)/2 + j-i
if (worksym[i,j] == 1){
suff_mat[m, 1] <- 1
if(advsym[i,j] == 1){
suff_mat[m, 4] <- 1
if(friendsym[i,j] == 1){
suff_mat[m, 7] <- 1
}
}
}
if (advsym[i,j] == 1){
suff_mat[m, 2] <- 1
if (friendsym[i,j] == 1 ){
suff_mat[m, 6] <- 1
}
}
if (friendsym[i,j] == 1 ){
suff_mat[m, 3] <- 1
if (worksym[i,j] == 1){
suff_mat[m, 5] <- 1
}
}
}
}
suff_mat
suff_mat <- suff_mat[rowSums(suff_mat[])>0,]
suff_mat
rowSums(suff_mat)
colSums(suff_mat)
devtools::document()
cal_suffstats_Lazega()
suff
simsamp
nn <- 10
nn <- 10
reproduced_suff <- matrix(0,nn,7)
for(m in c(nn:nn)){
seeds <- sample(1:9999999,m,replace = FALSE)
sim_suff <- matrix(0,m, 7)
theta <- data_theta
for(iter in c(1:m)){
seed <- seeds[iter]
reproduced <- samp_ml(theta, N = 71, mdim = 6,
mterm = 'other',intv = 3, H = 2, seed = seeds[iter],
basis_arguments = unique_dyads_vec)
simsamp <- reproduced$suff_stats
reproduced_suff[iter,] <- simsamp[,3]
}
}
reproduced_suff
data_theta
reproduce_Lazega()
devtools::document()
devtools::document()
reproduce_Lazega()
reproduce_Lazega()
devtools::document()
reproduce_Lazega()
warnings()
## Examples of data analysis using the Lazega lawyer network data set
compute_suffstats_Lazega() # compute the observed sufficient statistics from the Lazega network.
rm(list = ls())
rm(list = ls())
library("devtools")
devtools::document()
set.seed(123456)
## Parameter settings
burnin <- 100
k <- 3  # number of layers
H <- 2  # highest order of interactions
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'SBM'  # generate stochastic block model basis
intv <- 3
iter_max <- 30000
# SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100
iter_max <- 30000
seed <- sample(1:9999999,1,replace = FALSE)
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
## Examples of data analysis using the Lazega lawyer network data set
compute_suffstats_Lazega() # compute the observed sufficient statistics from the Lazega network.
devtools::document()
## Examples of data analysis using the Lazega lawyer network data set
compute_suffstats_Lazega() # compute the observed sufficient statistics from the Lazega network.
suff_mat
for(r in c(1:length(net_data[,1]))){
row <- net_data[r,1]
col <- net_data[r,2]
layer <- net_data[r,3]
work_sim <- matrix(0,N,N)
adv_sim <- matrix(0,N,N)
friend_sim <- matrix(0,N,N)
if(layer == 1){
work_sim[row,col] <- 1
}
if(layer == 2){
adv_sim[row,col] <- 1
}
if(layer == 3){
friend_sim[row,col] <- 1
}
}
net_data = Lazega_lawyer_network
N = 71
for(r in c(1:length(net_data[,1]))){
row <- net_data[r,1]
col <- net_data[r,2]
layer <- net_data[r,3]
work_sim <- matrix(0,N,N)
adv_sim <- matrix(0,N,N)
friend_sim <- matrix(0,N,N)
if(layer == 1){
work_sim[row,col] <- 1
}
if(layer == 2){
adv_sim[row,col] <- 1
}
if(layer == 3){
friend_sim[row,col] <- 1
}
}
suff_mat <- matrix(0,choose(N,2),7) ## matrix of sufficient statistics for each dyad: number of edges \times dimension
for(i in c(1:(N-1))){
for(j in c((i + 1):N)){
m <- ((N-1)+(N-i+1))*(i-1)/2 + j-i
if (work_sim[i,j] == 1){
suff_mat[m, 1] <- 1
if(adv_sim[i,j] == 1){
suff_mat[m, 4] <- 1
if(friend_sim[i,j] == 1){
suff_mat[m, 7] <- 1
}
}
}
if (adv_sim[i,j] == 1){
suff_mat[m, 2] <- 1
if (friend_sim[i,j] == 1 ){
suff_mat[m, 6] <- 1
}
}
if (friend_sim[i,j] == 1 ){
suff_mat[m, 3] <- 1
if (work_sim[i,j] == 1){
suff_mat[m, 5] <- 1
}
}
}
}
suff_mat
suff_mat <- suff_mat[rowSums(suff_mat[])>0,]
suff_mat
net_data
work_sim
net_data[r,3]
adv_sim
work_sim <- matrix(0,N,N)
adv_sim <- matrix(0,N,N)
friend_sim <- matrix(0,N,N)
for(r in c(1:length(net_data[,1]))){
row <- net_data[r,1]
col <- net_data[r,2]
layer <- net_data[r,3]
if(layer == 1){
work_sim[row,col] <- 1
}
if(layer == 2){
adv_sim[row,col] <- 1
}
if(layer == 3){
friend_sim[row,col] <- 1
}
}
suff_mat <- matrix(0,choose(N,2),7) ## matrix of sufficient statistics for each dyad: number of edges \times dimension
for(i in c(1:(N-1))){
for(j in c((i + 1):N)){
m <- ((N-1)+(N-i+1))*(i-1)/2 + j-i
if (work_sim[i,j] == 1){
suff_mat[m, 1] <- 1
if(adv_sim[i,j] == 1){
suff_mat[m, 4] <- 1
if(friend_sim[i,j] == 1){
suff_mat[m, 7] <- 1
}
}
}
if (adv_sim[i,j] == 1){
suff_mat[m, 2] <- 1
if (friend_sim[i,j] == 1 ){
suff_mat[m, 6] <- 1
}
}
if (friend_sim[i,j] == 1 ){
suff_mat[m, 3] <- 1
if (work_sim[i,j] == 1){
suff_mat[m, 5] <- 1
}
}
}
}
suff_mat <- suff_mat[rowSums(suff_mat[])>0,]
suff_mat
colSums(suff_mat)
devtools::document()
## Examples of data analysis using the Lazega lawyer network data set
compute_suffstats_Lazega() # compute the observed sufficient statistics from the Lazega network.
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega() # compute the observed sufficient statistics from the Lazega network.
data_res <- est_data(net_data = Lazega_lawyer_network, N = 71) # estimate ERGM model parameters using MPLE.
data_theta <- data_res$theta_est
data_theta
reproduced_suff <- reproduce_Lazega(m = 10 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
reproduced_suff
obs
suff_y <- c(sim_suff[,1],sim_suff[,4],sim_suff[,6],sim_suff[,2],sim_suff[,3],sim_suff[,5],sim_suff[,7])
reproduced_suff
c(reproduced_suff)
suff_y <- c(suff_y)
suff_y <- c(reproduced_suff)
suff_mean <- colMeans(reproduced_suff)
suff_mean <- colMeans(reproduced_suff)
df <- data.frame(suff_y,name = as.factor(rep(c("Coworker", "Advice", "Friendship", "CxA","CxF","AxF","CxAxF"),each = m)))
suff_y <- c(reproduced_suff)
suff_mean <- colMeans(reproduced_suff)
df <- data.frame(suff_y,name = as.factor(rep(c("Coworker", "Advice", "Friendship", "CxA","CxF","AxF","CxAxF"),each = m)))
suff_y
m=10
df <- data.frame(suff_y,name = as.factor(rep(c("Coworker", "Advice", "Friendship", "CxA","CxF","AxF","CxAxF"),each = m)))
dim_x <- c("Coworker", "Advice", "Friendship", "CxA","CxF","AxF","CxAxF")
df$name <- factor(df$name,levels = c("Coworker", "Advice", "Friendship", "CxA","CxF","AxF","CxAxF"))
fig1 <- ggplot(df,aes(x = name, y = suff_y)) +
geom_boxplot(fill = "grey") +
geom_point( size = 3,aes(x = name,y=rep(suff_mean,each = m)),color="red") +
theme_classic() +
labs(title = expression(paste("Box-plot of the reproduced sufficient statistic")) , x = "Layer interaction", y ="Sufficient statistic") +
theme(plot.title = element_text(hjust = 0.5,size = 15),
axis.text = element_text(size=10),
axis.title=element_text(size=15),
panel.border = element_rect(colour = "black", fill=NA,linewidth = 1),
#legend.title = element_text( size = 30),
#legend.text = element_text( size = 30),
#legend.position = "right",
#legend.key.width = unit(5, 'cm'),
#legend.background = element_blank(),
legend.box.background = element_rect(colour = "black",linewidth = 1)) +
scale_color_manual(values = c("red"))
library(ggplot2)
fig1 <- ggplot(df,aes(x = name, y = suff_y)) +
geom_boxplot(fill = "grey") +
geom_point( size = 3,aes(x = name,y=rep(suff_mean,each = m)),color="red") +
theme_classic() +
labs(title = expression(paste("Box-plot of the reproduced sufficient statistic")) , x = "Layer interaction", y ="Sufficient statistic") +
theme(plot.title = element_text(hjust = 0.5,size = 15),
axis.text = element_text(size=10),
axis.title=element_text(size=15),
panel.border = element_rect(colour = "black", fill=NA,linewidth = 1),
#legend.title = element_text( size = 30),
#legend.text = element_text( size = 30),
#legend.position = "right",
#legend.key.width = unit(5, 'cm'),
#legend.background = element_blank(),
legend.box.background = element_rect(colour = "black",linewidth = 1)) +
scale_color_manual(values = c("red"))
fig1
fig1 <- ggplot(df,aes(x = name, y = suff_y)) +
geom_boxplot(fill = "grey") +
geom_point( size = 3,aes(x = name,y=rep(obs,each = m)),color="red") +
theme_classic() +
labs(title = expression(paste("Box-plot of the reproduced sufficient statistic")) , x = "Layer interaction", y ="Sufficient statistic") +
theme(plot.title = element_text(hjust = 0.5,size = 15),
axis.text = element_text(size=10),
axis.title=element_text(size=15),
panel.border = element_rect(colour = "black", fill=NA,linewidth = 1),
#legend.title = element_text( size = 30),
#legend.text = element_text( size = 30),
#legend.position = "right",
#legend.key.width = unit(5, 'cm'),
#legend.background = element_blank(),
legend.box.background = element_rect(colour = "black",linewidth = 1)) +
scale_color_manual(values = c("red"))
fig1
devtools::document()
draw_box_plot(reproduced_suff, obs)
# m indicates the number of repetitions
reproduced_suff <- reproduce_Lazega(m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
draw_box_plot(reproduced_suff, obs)
rm(list = ls())
library("devtools")
devtools::document()
set.seed(123456)
## Parameter settings
burnin <- 100
k <- 3  # number of layers
H <- 2  # highest order of interactions
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'SBM'  # generate stochastic block model basis
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
intv <- 3
iter_max <- 30000
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100 # number of nodes
seed <- sample(1:9999999,1,replace = FALSE)
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
devtools::document()
## Sample and estimate a multilayer network, by default it is
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
print(estimates)
theta
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega() # compute the observed sufficient statistics from the Lazega network.
data_res <- est_data(net_data = Lazega_lawyer_network, N = 71) # estimate ERGM model parameters using MPLE.
# compute the basis network of Lazega
unique_dyads <- unique(Lazega_lawyer_network[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
data_res <- est_ml(NetMat = Lazega_lawyer_network, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)  # estimate ERGM model parameters using MPLE.
# obtain the estimated theta for Lazega network
data_theta <- data_res$theta_est
data_theta
# m indicates the number of repetitions
reproduced_suff <- reproduce_Lazega(m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
draw_box_plot(reproduced_suff, obs)
devtools::document()
draw_box_plot(reproduced_suff, obs)
devtools::document()
draw_box_plot(reproduced_suff, obs)
devtools::document()
draw_box_plot(reproduced_suff, obs)
rm(list = ls())
library("devtools")
devtools::document()
set.seed(123456)
## Parameter settings
burnin <- 100
k <- 3  # number of layers, okay to change
H <- 2  # highest order of interactions, okay to change (<= k)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
intv <- 3 # sampling iterval
iter_max <- 30000 # maximum iterations for estimation
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
rm(list = ls())
library("devtools")
devtools::document()
set.seed(123456)
seed <- sample(1:9999999,1,replace = FALSE)
## Parameter settings
burnin <- 100
k <- 3  # number of layers, okay to change
H <- 2  # highest order of interactions, okay to change (<= k)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
intv <- 3 # sampling iterval
iter_max <- 30000 # maximum iterations for estimation
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100 # number of nodes
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
## Sample and estimate the multilayer network sampled above
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
print(estimates)
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega() # compute the observed sufficient statistics from the Lazega network.
# compute the basis network of Lazega
unique_dyads <- unique(Lazega_lawyer_network[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
# estimate ERGM model parameters using MPLE.
data_res <- est_ml(NetMat = Lazega_lawyer_network, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)
# obtain the estimated theta for Lazega network
data_theta <- data_res$theta_est
# m indicates the number of repetitions
reproduced_suff <- reproduce_Lazega(m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
draw_box_plot(reproduced_suff, obs)
theta
