#legend.background = element_blank(),
legend.box.background = element_rect(colour = "black",linewidth = 1)) +
scale_color_manual(values = c("red"))
library(ggplot2)
fig1 <- ggplot(df,aes(x = name, y = suff_y)) +
geom_boxplot(fill = "grey") +
geom_point( size = 3,aes(x = name,y=rep(suff_mean,each = m)),color="red") +
theme_classic() +
labs(title = expression(paste("Box-plot of the reproduced sufficient statistic")) , x = "Layer interaction", y ="Sufficient statistic") +
theme(plot.title = element_text(hjust = 0.5,size = 15),
axis.text = element_text(size=10),
axis.title=element_text(size=15),
panel.border = element_rect(colour = "black", fill=NA,linewidth = 1),
#legend.title = element_text( size = 30),
#legend.text = element_text( size = 30),
#legend.position = "right",
#legend.key.width = unit(5, 'cm'),
#legend.background = element_blank(),
legend.box.background = element_rect(colour = "black",linewidth = 1)) +
scale_color_manual(values = c("red"))
fig1
fig1 <- ggplot(df,aes(x = name, y = suff_y)) +
geom_boxplot(fill = "grey") +
geom_point( size = 3,aes(x = name,y=rep(obs,each = m)),color="red") +
theme_classic() +
labs(title = expression(paste("Box-plot of the reproduced sufficient statistic")) , x = "Layer interaction", y ="Sufficient statistic") +
theme(plot.title = element_text(hjust = 0.5,size = 15),
axis.text = element_text(size=10),
axis.title=element_text(size=15),
panel.border = element_rect(colour = "black", fill=NA,linewidth = 1),
#legend.title = element_text( size = 30),
#legend.text = element_text( size = 30),
#legend.position = "right",
#legend.key.width = unit(5, 'cm'),
#legend.background = element_blank(),
legend.box.background = element_rect(colour = "black",linewidth = 1)) +
scale_color_manual(values = c("red"))
fig1
devtools::document()
draw_box_plot(reproduced_suff, obs)
# m indicates the number of repetitions
reproduced_suff <- reproduce_Lazega(m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
draw_box_plot(reproduced_suff, obs)
rm(list = ls())
library("devtools")
devtools::document()
set.seed(123456)
## Parameter settings
burnin <- 100
k <- 3  # number of layers
H <- 2  # highest order of interactions
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
mterm <- 'SBM'  # generate stochastic block model basis
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
intv <- 3
iter_max <- 30000
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100 # number of nodes
seed <- sample(1:9999999,1,replace = FALSE)
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
devtools::document()
## Sample and estimate a multilayer network, by default it is
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
print(estimates)
theta
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega() # compute the observed sufficient statistics from the Lazega network.
data_res <- est_data(net_data = Lazega_lawyer_network, N = 71) # estimate ERGM model parameters using MPLE.
# compute the basis network of Lazega
unique_dyads <- unique(Lazega_lawyer_network[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
data_res <- est_ml(NetMat = Lazega_lawyer_network, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)  # estimate ERGM model parameters using MPLE.
# obtain the estimated theta for Lazega network
data_theta <- data_res$theta_est
data_theta
# m indicates the number of repetitions
reproduced_suff <- reproduce_Lazega(m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
draw_box_plot(reproduced_suff, obs)
devtools::document()
draw_box_plot(reproduced_suff, obs)
devtools::document()
draw_box_plot(reproduced_suff, obs)
devtools::document()
draw_box_plot(reproduced_suff, obs)
rm(list = ls())
library("devtools")
devtools::document()
set.seed(123456)
## Parameter settings
burnin <- 100
k <- 3  # number of layers, okay to change
H <- 2  # highest order of interactions, okay to change (<= k)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
intv <- 3 # sampling iterval
iter_max <- 30000 # maximum iterations for estimation
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
rm(list = ls())
library("devtools")
devtools::document()
set.seed(123456)
seed <- sample(1:9999999,1,replace = FALSE)
## Parameter settings
burnin <- 100
k <- 3  # number of layers, okay to change
H <- 2  # highest order of interactions, okay to change (<= k)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
intv <- 3 # sampling iterval
iter_max <- 30000 # maximum iterations for estimation
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100 # number of nodes
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
## Sample and estimate the multilayer network sampled above
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
print(estimates)
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega() # compute the observed sufficient statistics from the Lazega network.
# compute the basis network of Lazega
unique_dyads <- unique(Lazega_lawyer_network[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
# estimate ERGM model parameters using MPLE.
data_res <- est_ml(NetMat = Lazega_lawyer_network, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)
# obtain the estimated theta for Lazega network
data_theta <- data_res$theta_est
# m indicates the number of repetitions
reproduced_suff <- reproduce_Lazega(m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
draw_box_plot(reproduced_suff, obs)
theta
devtools::document()
## Sample and estimate the multilayer network sampled above
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
set.seed(123456)
seed <- sample(1:9999999,1,replace = FALSE)
## Parameter settings
burnin <- 100
k <- 3  # number of layers, okay to change
H <- 2  # highest order of interactions, okay to change (<= k)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
intv <- 3 # sampling iterval
iter_max <- 30000 # maximum iterations for estimation
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100 # number of nodes
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
## Sample and estimate the multilayer network sampled above
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
summary_est(estimates)
devtools::document()
summary_est(estimates)
devtools::document()
devtools::document()
summary_est(estimates)
usethis::use_package("insight")
usethis::use_package("utils")
devtools::document()
summary_est(estimates)
devtools::document()
summary_est(estimates)
devtools::document()
summary_est(estimates)
devtools::document()
summary_est(estimates)
devtools::document()
summary_est(estimates)
devtools::document()
summary_est(estimates)
devtools::document()
summary_est(estimates)
devtools::document()
summary_est(estimates)
devtools::document()
summary_est(estimates)
devtools::document()
summary_est(estimates)
rm(list = ls())
library("devtools")
devtools::document()
set.seed(123456)
seed <- sample(1:9999999,1,replace = FALSE)
## Parameter settings
burnin <- 100
k <- 3  # number of layers, okay to change
H <- 2  # highest order of interactions, okay to change (<= k)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
intv <- 3 # sampling iterval
iter_max <- 30000 # maximum iterations for estimation
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100 # number of nodes
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
## Sample and estimate the multilayer network sampled above
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
print(estimates)
summary_est(estimates)
rm(list = ls())
library("devtools")
devtools::document()
set.seed(123456)
seed <- sample(1:9999999,1,replace = FALSE)
## Parameter settings
burnin <- 100
k <- 3  # number of layers, okay to change
H <- 2  # highest order of interactions, okay to change (<= k)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
intv <- 3 # sampling iterval
iter_max <- 30000 # maximum iterations for estimation
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100 # number of nodes
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
## Sample and estimate the multilayer network sampled above
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
print(estimates)
summary_est(estimates)
stop("stop it")
?message
## Error handling
error = function(e){
message("An error occurred:\n", e)
}
error(e)
error(1)
error("a")
beera <- function(expr){
tryCatch(expr,
error = function(e){
message("An error occurred:\n", e)
},
warning = function(w){
message("A warning occured:\n", w)
},
finally = {
message("Finally done!")
})
}
beera(a)
beera(1)
beera(1+1)
beera(12^2)
beera(12^2+'a')
.libPaths()
library(stats)
?summary()
?summary.lm()
?summary()
x = c(1:100)
y = 2*x + 1
y = 2*x + 1 + rnorm(100,0,1)
y
m <- lm(y ~ x)
summary(m)
summary.lm(m)
View(function_name)
View(lm)
test()
devtools::test()
devtools::check()
rm(list = ls())
library("devtools")
devtools::document()
devtools::check()
.Last.error
getwd()
library(changer)
install.packages(changer)
install.packages("changer")
library(changer)
changer(getwd(),new_name = 'mlyrnetwork')
rm(list = ls())
library("devtools")
devtools::document()
devtools::check()
devtools::document()
N=1
## Parameter settings
burnin <- 100
k <- 3  # number of layers, okay to change
H <- 2  # highest order of interactions, okay to change (<= k)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
intv <- 3 # sampling iterval
iter_max <- 30000 # maximum iterations for estimation
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
## Sample and estimate the multilayer network sampled above
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
devtools::document()
## Sample and estimate the multilayer network sampled above
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
devtools::document()
## Sample and estimate the multilayer network sampled above
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
devtools::check()
is.numeric(2.4)
is.integer(2)
check.integer(1)
is.wholenumber(1)
devtools::document()
rm(list = ls())
library("devtools")
devtools::document()
set.seed(123456)
seed <- sample(1:9999999,1,replace = FALSE)
## Parameter settings
burnin <- 100
k <- 3  # number of layers, okay to change
H <- 2  # highest order of interactions, okay to change (<= k)
mdim <- 0
for(i in 1:H){
mdim <- mdim + choose(k,i)
}
intv <- 3 # sampling iterval
iter_max <- 30000 # maximum iterations for estimation
# generate stochastic block model basis as an eample
# can be set to 'Ber', 'LSM' and 'other'
mterm <- 'SBM'
# set SBM parameters
B <- 3
p_within <- .25
p_between <- .01
# set basis network arguments for SBM basis
basis_arguments <- c(B, p_within ,p_between, seed)
# generate theta for layers
params <- matrix(runif(mdim,-1,1),1,mdim)
params[,c(3,6)] = 0
theta <- params[1,]
N <- 100 # number of nodes
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
## Sample and estimate the multilayer network sampled above
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
summary(estimates)
N <- 30 # number of nodes
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
N <- 100 # number of nodes
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
## Sample and estimate the multilayer network sampled above
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
N <- 75 # number of nodes
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
N <- 100 # number of nodes
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
summary_est(estimates)
theta
N <- 300 # number of nodes
## Sample a k-layer multilayer network
mlnet <- samp_ml(theta,N = N, k = k, H = H ,mdim = mdim, seed = seed, mterm = 'SBM', basis_arguments = basis_arguments)
## plot the k-layer multilayer network sampled above
draw_mlnet(mlnet$net,N)
## Sample and estimate the multilayer network sampled above
estimates <- est_ml(NetMat = mlnet$net, N = N, k = k, H = H, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
summary_est(estimates)
theta
## Examples of invalid input
est_ml(NetMat = mlnet$net, N = N, k = k, H = k+1, mdim = mdim, mterm = mterm,
seed = seed, basis_arguments = basis_arguments)
## Examples of data analysis using the Lazega lawyer network data set
obs <- compute_suffstats_Lazega() # compute the observed sufficient statistics from the Lazega network.
# compute the basis network of Lazega
unique_dyads <- unique(Lazega_lawyer_network[,1:2])
unique_dyads_vec <- as.vector(t(unique_dyads))
# estimate ERGM model parameters using MPLE.
data_res <- est_ml(NetMat = Lazega_lawyer_network, N = 71, k = 3, H = 2, mdim = 6, mterm = 'other',
seed = seed, basis_arguments = unique_dyads_vec)
# obtain the estimated theta for Lazega network
data_theta <- data_res$theta_est
# m indicates the number of repetitions
reproduced_suff <- reproduce_Lazega(m = 20 , theta = data_theta) # reproduce the Lazega network using the estimated parameters and the basis network induced from the observed network.
draw_box_plot(reproduced_suff, obs)
summary(data_theta)
data_theta
summary_est(data_res)
