library(ergm)
library(GGally)
install.packages(GGally)
install.packages("GGally")
library("latentnet")
install.packages("latentnet")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(ggpubr)
require(grid)
library(reshape2)
install.packages("reshape2")
install.packages("sna")
library(ergm)
library(GGally)
library(latentnet)
library(ggplot2)
library(ggpubr)
require(grid)
library(reshape2)
library(sna)
## Create figure handles for each of the network
fig <- vector("list",length = 3*3)
# Generate SBM with K = 3 blocks
N <- 75
node_membs <- c(rep(1, 25), rep(2, 25), rep(3, 25))
p_within <- .25
p_between <- .01
gen_sbm <- function(N, node_membs, p_within, p_between) {
net <- matrix(0, nrow = N, ncol = N)
for (i in 1:(N-1)) {
for (j in (i+1):N) {
net[i, j] <- rbinom(1, 1, ifelse(node_membs[i] == node_membs[j], p_within, p_between))
net[j, i] <- net[i, j]
}
}
net <- as.network(net, directed = FALSE)
return(net)
}
## Generate 3 layers of SBM
for(i in c(1:3)){
net1 <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
x = gplot.layout.fruchtermanreingold(net1, NULL)
net1 %v% "x" = x[, 1]
net1 %v% "y" = x[, 2]
## Draw the SBM network, use "mode" argument to control the node position
fig[[i]] <- ggnet2(net1, node.size = 6, node.color = "orange", mode = c("x", "y") ) +
labs(title = "SBM") +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
fig[[1]]
## Arrange all 3 networks in one plot
ggarrange(fig[[1]],fig[[2]],fig[[3]],ncol = 3, nrow = 1)
rm(list = ls())
library(ergm)
library(GGally)
library(latentnet)
library(ggplot2)
library(ggpubr)
require(grid)
library(reshape2)
library(sna)
## Create figure handles for each of the network
fig <- vector("list",length = 3*3)
# Generate SBM with K = 3 blocks
N <- 75
node_membs <- c(rep(1, 25), rep(2, 25), rep(3, 25))
p_within <- .25
p_between <- .01
gen_sbm <- function(N, node_membs, p_within, p_between) {
net <- matrix(0, nrow = N, ncol = N)
for (i in 1:(N-1)) {
for (j in (i+1):N) {
net[i, j] <- rbinom(1, 1, ifelse(node_membs[i] == node_membs[j], p_within, p_between))
net[j, i] <- net[i, j]
}
}
net <- as.network(net, directed = FALSE)
return(net)
}
node_colors <- c("orange","blue","purple")
## Generate 3 layers of SBM
for(i in c(1:3)){
net1 <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net1, NULL)
net1 %v% "x" = x[, 1]
net1 %v% "y" = x[, 2]
}
## Draw the SBM network, use "mode" argument to control the node position
fig[[i]] <- ggnet2(net1, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = "SBM") +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
ggarrange(fig[[1]],fig[[2]],fig[[3]],ncol = 3, nrow = 1)
## Generate 3 layers of SBM
for(i in c(1:3)){
net1 <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net1, NULL)
net1 %v% "x" = x[, 1]
net1 %v% "y" = x[, 2]
}
## Draw the SBM network, use "mode" argument to control the node position
fig[[i]] <- ggnet2(net1, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = "SBM") +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
net1 <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net1, NULL)
net1 %v% "x" = x[, 1]
net1 %v% "y" = x[, 2]
}
## Draw the SBM network, use "mode" argument to control the node position
fig[[i]] <- ggnet2(net1, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = "SBM") +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
x = gplot.layout.fruchtermanreingold(net1, NULL)
net1 %v% "x" = x[, 1]
net1 %v% "y" = x[, 2]
## Draw the SBM network, use "mode" argument to control the node position
fig[[i]] <- ggnet2(net1, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = "SBM") +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
## Generate 3 layers of SBM
for(i in c(1:3)){
net1 <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net1, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net1 %v% "x" = x[, 1]
net1 %v% "y" = x[, 2]
fig[[i]] <- ggnet2(net1, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = "SBM") +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
ggarrange(fig[[1]],fig[[2]],fig[[3]],ncol = 3, nrow = 1)
## Generate 3 layers of SBM
for(i in c(1:3)){
net1 <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net1, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net1 %v% "x" = x[, 1]
net1 %v% "y" = x[, 2]
fig[[i]] <- ggnet2(net1, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = "Layer " + as.character(1)) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
ggarrange(fig[[1]],fig[[2]],fig[[3]],ncol = 3, nrow = 1)
## Generate 3 layers of SBM
for(i in c(1:3)){
net1 <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net1, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net1 %v% "x" = x[, 1]
net1 %v% "y" = x[, 2]
fig[[i]] <- ggnet2(net1, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = "Layer " + as.character(1)) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Generate 3 layers of SBM
for(i in c(1:3)){
net1 <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net1, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net1 %v% "x" = x[, 1]
net1 %v% "y" = x[, 2]
fig[[i]] <- ggnet2(net1, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
ggarrange(fig[[1]],fig[[2]],fig[[3]],ncol = 3, nrow = 1)
# Generate SBM with K = 3 blocks
N <- 75
node_membs <- c(rep(1, 25), rep(2, 25), rep(3, 25))
p_within <- .25
p_between <- .01
gen_sbm <- function(N, node_membs, p_within, p_between) {
net <- matrix(0, nrow = N, ncol = N)
for (i in 1:(N-1)) {
for (j in (i+1):N) {
net[i, j] <- rbinom(1, 1, ifelse(node_membs[i] == node_membs[j], p_within, p_between))
net[j, i] <- net[i, j]
}
}
net <- as.network(net, directed = FALSE)
return(net)
}
node_colors <- c("orange","blue","purple")
## Generate 3 layers of SBM
for(i in c(1:3)){
net1 <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net1, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net1 %v% "x" = x[, 1]
net1 %v% "y" = x[, 2]
fig[[i]] <- ggnet2(net1, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
# Generate Latent Space Model (d = 2)
N <- 75
theta <- -2
pos <- t(sapply(1:N, function(x) { rnorm(2) }))
gen_lsm <- function(N, theta, pos) {
net <- matrix(0, nrow = N, ncol = N)
for (i in 1:(N-1)) {
for (j in (i+1):N) {
odds <- theta - norm(pos[i,] - pos[j, ], type = "2")
p <- exp(odds) / (1 + exp(odds))
net[i, j] <- rbinom(1, 1, p)
net[j, i] <- net[i, j]
}
}
net <- as.network(net, directed = FALSE)
return(net)
}
## Generate 3 layers of LSM
for(i in c(1:3)){
net2 <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net2, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net2 %v% "x" = x[, 1]
net2 %v% "y" = x[, 2]
fig[[i+3]] <- ggnet2(net2, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
ggarrange(fig[[4]],fig[[5]],fig[[6]],ncol = 3, nrow = 1)
# Generate Latent Space Model (d = 2)
N <- 75
theta <- -2
pos <- t(sapply(1:N, function(x) { rnorm(2) }))
gen_lsm <- function(N, theta, pos) {
net <- matrix(0, nrow = N, ncol = N)
for (i in 1:(N-1)) {
for (j in (i+1):N) {
odds <- theta - norm(pos[i,] - pos[j, ], type = "2")
p <- exp(odds) / (1 + exp(odds))
net[i, j] <- rbinom(1, 1, p)
net[j, i] <- net[i, j]
}
}
net <- as.network(net, directed = FALSE)
return(net)
}
## Generate 3 layers of LSM
for(i in c(1:3)){
net <- gen_lsm(N, theta, pos)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net %v% "x" = x[, 1]
net %v% "y" = x[, 2]
fig[[i+3]] <- ggnet2(net, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
ggarrange(fig[[4]],fig[[5]],fig[[6]],ncol = 3, nrow = 1)
# Generate ERGM
N <- 75
theta <- c(-3.25, .5, .5)
## Generate 3 layers of ERGM
for(i in c(1:3)){
net <- simulate(network.initialize(N, directed = FALSE) ~ edges + gwesp,
coef = theta,
control = control.simulate(MCMC.burnin = 3e+6))
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net %v% "x" = x[, 1]
net %v% "y" = x[, 2]
fig[[i+6]] <- ggnet2(net, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
ggarrange(fig[[7]],fig[[8]],fig[[9]],ncol = 3, nrow = 1)
ggrange(fig[[1:9]],ncol = 3, nrow = 3)
ggarrange(fig[[1:9]],ncol = 3, nrow = 3)
fig[1]
fig[2]
fig[[2]]
fig[[1:2]]
fig[[1:3]]
a = c(1)
a.append(d)
a
append(a,3)
a
fig_list = list()
for(i in c(1:9)){
append(fig_list,fig[[i]])
}
ggarrange(plotlist = fig_list,ncol = 3, nrow = 3)
for(i in c(1:9)){
append(fig_list,fig[[i]])
}
fig_list
fig_list = list()
for(i in c(1:9)){
fig_list <- append(fig_list,fig[[i]])
}
View(fig_list)
ggarrange(plotlist = fig_list,ncol = 3, nrow = 3)
rm(list = ls())
library(ergm)
library(GGally)
library(latentnet)
library(ggplot2)
library(ggpubr)
require(grid)
library(reshape2)
library(sna)
## Create figure handles for each of the network
fig <- vector("list",length = 3*3)
node_colors <- c("orange","blue","purple")
# Generate SBM with K = 3 blocks
N <- 75
node_membs <- c(rep(1, 25), rep(2, 25), rep(3, 25))
p_within <- .25
p_between <- .01
gen_sbm <- function(N, node_membs, p_within, p_between) {
net <- matrix(0, nrow = N, ncol = N)
for (i in 1:(N-1)) {
for (j in (i+1):N) {
net[i, j] <- rbinom(1, 1, ifelse(node_membs[i] == node_membs[j], p_within, p_between))
net[j, i] <- net[i, j]
}
}
net <- as.network(net, directed = FALSE)
return(net)
}
## Generate 3 layers of SBM
for(i in c(1:3)){
net <- gen_sbm(N, node_membs, p_within, p_between)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net %v% "x" = x[, 1]
net %v% "y" = x[, 2]
fig[[i]] <- ggnet2(net, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
ggarrange(fig[[1]],fig[[2]],fig[[3]],ncol = 3, nrow = 1)
# Generate Latent Space Model (d = 2)
N <- 75
theta <- -2
pos <- t(sapply(1:N, function(x) { rnorm(2) }))
gen_lsm <- function(N, theta, pos) {
net <- matrix(0, nrow = N, ncol = N)
for (i in 1:(N-1)) {
for (j in (i+1):N) {
odds <- theta - norm(pos[i,] - pos[j, ], type = "2")
p <- exp(odds) / (1 + exp(odds))
net[i, j] <- rbinom(1, 1, p)
net[j, i] <- net[i, j]
}
}
net <- as.network(net, directed = FALSE)
return(net)
}
## Generate 3 layers of LSM
for(i in c(1:3)){
net <- gen_lsm(N, theta, pos)
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net %v% "x" = x[, 1]
net %v% "y" = x[, 2]
fig[[i+3]] <- ggnet2(net, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
ggarrange(fig[[4]],fig[[5]],fig[[6]],ncol = 3, nrow = 1)
# Generate ERGM
N <- 75
theta <- c(-3.25, .5, .5)
## Generate 3 layers of ERGM
for(i in c(1:3)){
net <- simulate(network.initialize(N, directed = FALSE) ~ edges + gwesp,
coef = theta,
control = control.simulate(MCMC.burnin = 3e+6))
## x is the position of each node, use this for all networks
if(i == 1){
x = gplot.layout.fruchtermanreingold(net, NULL)
}
## Draw the SBM network, use "mode" argument to control the node position
net %v% "x" = x[, 1]
net %v% "y" = x[, 2]
fig[[i+6]] <- ggnet2(net, node.size = 6, node.color = node_colors[i], mode = c("x", "y") ) +
labs(title = paste0("Layer ", as.character(i))) +  ## Change the graph title here
theme(plot.title = element_text(hjust = 0.5,size = 30))   ## Change the font size here
}
## Arrange all 3 networks in one plot
ggarrange(fig[[7]],fig[[8]],fig[[9]],ncol = 3, nrow = 1)
############################################################
### test of standard error  ################################
############################################################
rm(list = ls())
setwd("C:/Users/ljhhe/OneDrive - Florida State University/GitHub/mlyrnetwork")
library("devtools")
devtools::document()
compute_suffstats_Lazega()
net_data = Lazega_lawyer_network
N=71
work_sim <- matrix(0,N,N)
adv_sim <- matrix(0,N,N)
friend_sim <- matrix(0,N,N)
for(r in c(1:length(net_data[,1]))){
row <- net_data[r,1]
col <- net_data[r,2]
layer <- net_data[r,3]
if(layer == 1){
work_sim[row,col] <- 1
}
if(layer == 2){
adv_sim[row,col] <- 1
}
if(layer == 3){
friend_sim[row,col] <- 1
}
}
work_sim
View(adv_sim)
View(work_sim)
rm(list = ls())
suppressMessages(library(latentnet))
suppressMessages(library(ergm))
library(GGally)
library(latentnet)
library(ggplot2)
library(ggpubr)
require(grid)
library(reshape2)
adv <- read.table("C:/Users/ljhhe/OneDrive - Florida State University/Research/Applications/Lazega/LazegaLawyers/ELadv.dat")
friend <- read.table("C:/Users/ljhhe/OneDrive - Florida State University/Research/Applications/Lazega/LazegaLawyers/ELfriend.dat")
work <- read.table("C:/Users/ljhhe/OneDrive - Florida State University/Research/Applications/Lazega/LazegaLawyers/ELwork.dat")
N <- length(adv[,1])
mlnetwork <- matrix(0,1,3)
worksym <- matrix(0,N,N)
advsym <- matrix(0,N,N)
friendsym <- matrix(0,N,N)
### Create symmetric adjacent matrix
## work = 1
## advice = 2
## friend = 3
for(i in c(1:(N-1))){
for(j in c((i + 1):N)){
if(work[i,j] == 1 && work[j,i] == 1){
mlnetwork <- rbind(mlnetwork,c(i,j,1))
worksym[i,j] = 1
worksym[j,i] = 1
}
if(adv[i,j] == 1 && adv[j,i] == 1){
mlnetwork <- rbind(mlnetwork,c(i,j,2))
advsym[i,j] = 1
advsym[j,i] = 1
}
if(friend[i,j] == 1 && friend[j,i] == 1){
mlnetwork <- rbind(mlnetwork,c(i,j,3))
friendsym[i,j] = 1
friendsym[j,i] = 1
}
}
}
Lazega_lawyer_network <- mlnetwork[-1,]
Lazega_lawyer_network
View(Lazega_lawyer_network)
View(friend)
View(friend)
View(friendsym)
