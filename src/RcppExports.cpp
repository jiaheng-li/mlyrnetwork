// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_estimate_model_ml_Hway
List rcpp_estimate_model_ml_Hway(IntegerMatrix RNETWORK, IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, IntegerVector random_seeds, NumericVector g);
RcppExport SEXP _mlayernetwork_rcpp_estimate_model_ml_Hway(SEXP RNETWORKSEXP, SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP random_seedsSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type RNETWORK(RNETWORKSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type random_seeds(random_seedsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_estimate_model_ml_Hway(RNETWORK, rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, random_seeds, g));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_estimate_model_ml_3way
List rcpp_estimate_model_ml_3way(IntegerMatrix RNETWORK, NumericVector rNR_tol, IntegerVector rNR_max, IntegerVector rMCMLE_max, IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, LogicalVector rcheck_chull, IntegerVector random_seeds, NumericVector g);
RcppExport SEXP _mlayernetwork_rcpp_estimate_model_ml_3way(SEXP RNETWORKSEXP, SEXP rNR_tolSEXP, SEXP rNR_maxSEXP, SEXP rMCMLE_maxSEXP, SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP rcheck_chullSEXP, SEXP random_seedsSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type RNETWORK(RNETWORKSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rNR_tol(rNR_tolSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rNR_max(rNR_maxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rMCMLE_max(rMCMLE_maxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type rcheck_chull(rcheck_chullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type random_seeds(random_seedsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_estimate_model_ml_3way(RNETWORK, rNR_tol, rNR_max, rMCMLE_max, rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, rcheck_chull, random_seeds, g));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_estimate_model_ml
List rcpp_estimate_model_ml(IntegerMatrix RNETWORK, NumericVector rIter_max, IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, LogicalVector rcheck_chull, IntegerVector random_seeds, NumericVector g);
RcppExport SEXP _mlayernetwork_rcpp_estimate_model_ml(SEXP RNETWORKSEXP, SEXP rIter_maxSEXP, SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP rcheck_chullSEXP, SEXP random_seedsSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type RNETWORK(RNETWORKSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rIter_max(rIter_maxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type rcheck_chull(rcheck_chullSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type random_seeds(random_seedsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_estimate_model_ml(RNETWORK, rIter_max, rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, rcheck_chull, random_seeds, g));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_simulate_ml_LSM
List rcpp_simulate_ml_LSM(IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, NumericVector rtheta, int rand_seed, NumericVector g, double fe, double nmu, double nsd);
RcppExport SEXP _mlayernetwork_rcpp_simulate_ml_LSM(SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP rthetaSEXP, SEXP rand_seedSEXP, SEXP gSEXP, SEXP feSEXP, SEXP nmuSEXP, SEXP nsdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rtheta(rthetaSEXP);
    Rcpp::traits::input_parameter< int >::type rand_seed(rand_seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type fe(feSEXP);
    Rcpp::traits::input_parameter< double >::type nmu(nmuSEXP);
    Rcpp::traits::input_parameter< double >::type nsd(nsdSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_simulate_ml_LSM(rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, rtheta, rand_seed, g, fe, nmu, nsd));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_simulate_ml_SBM
List rcpp_simulate_ml_SBM(IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, NumericVector rtheta, int rand_seed, NumericVector g, int block, double p1, double p2);
RcppExport SEXP _mlayernetwork_rcpp_simulate_ml_SBM(SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP rthetaSEXP, SEXP rand_seedSEXP, SEXP gSEXP, SEXP blockSEXP, SEXP p1SEXP, SEXP p2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rtheta(rthetaSEXP);
    Rcpp::traits::input_parameter< int >::type rand_seed(rand_seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    Rcpp::traits::input_parameter< int >::type block(blockSEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_simulate_ml_SBM(rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, rtheta, rand_seed, g, block, p1, p2));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_simulate_ml
List rcpp_simulate_ml(IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, NumericVector rtheta, int rand_seed, NumericVector g);
RcppExport SEXP _mlayernetwork_rcpp_simulate_ml(SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP rthetaSEXP, SEXP rand_seedSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rtheta(rthetaSEXP);
    Rcpp::traits::input_parameter< int >::type rand_seed(rand_seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_simulate_ml(rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, rtheta, rand_seed, g));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_simulate_ml_suffstats
List rcpp_simulate_ml_suffstats(IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, NumericVector rtheta, int rand_seed, NumericVector g);
RcppExport SEXP _mlayernetwork_rcpp_simulate_ml_suffstats(SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP rthetaSEXP, SEXP rand_seedSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rtheta(rthetaSEXP);
    Rcpp::traits::input_parameter< int >::type rand_seed(rand_seedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_simulate_ml_suffstats(rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, rtheta, rand_seed, g));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_exact_simulate_ml
List rcpp_exact_simulate_ml(IntegerVector rsamp_num, IntegerVector rburnin, IntegerVector rinterval, IntegerVector rmodel_dim, StringVector model_terms, IntegerVector rnum_nodes, IntegerVector rnum_layers, NumericVector rtheta, int rand_seed);
RcppExport SEXP _mlayernetwork_rcpp_exact_simulate_ml(SEXP rsamp_numSEXP, SEXP rburninSEXP, SEXP rintervalSEXP, SEXP rmodel_dimSEXP, SEXP model_termsSEXP, SEXP rnum_nodesSEXP, SEXP rnum_layersSEXP, SEXP rthetaSEXP, SEXP rand_seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type rsamp_num(rsamp_numSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rburnin(rburninSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rinterval(rintervalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rmodel_dim(rmodel_dimSEXP);
    Rcpp::traits::input_parameter< StringVector >::type model_terms(model_termsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_nodes(rnum_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rnum_layers(rnum_layersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rtheta(rthetaSEXP);
    Rcpp::traits::input_parameter< int >::type rand_seed(rand_seedSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_exact_simulate_ml(rsamp_num, rburnin, rinterval, rmodel_dim, model_terms, rnum_nodes, rnum_layers, rtheta, rand_seed));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _mlayernetwork_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _mlayernetwork_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _mlayernetwork_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _mlayernetwork_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mlayernetwork_rcpp_estimate_model_ml_Hway", (DL_FUNC) &_mlayernetwork_rcpp_estimate_model_ml_Hway, 10},
    {"_mlayernetwork_rcpp_estimate_model_ml_3way", (DL_FUNC) &_mlayernetwork_rcpp_estimate_model_ml_3way, 14},
    {"_mlayernetwork_rcpp_estimate_model_ml", (DL_FUNC) &_mlayernetwork_rcpp_estimate_model_ml, 12},
    {"_mlayernetwork_rcpp_simulate_ml_LSM", (DL_FUNC) &_mlayernetwork_rcpp_simulate_ml_LSM, 13},
    {"_mlayernetwork_rcpp_simulate_ml_SBM", (DL_FUNC) &_mlayernetwork_rcpp_simulate_ml_SBM, 13},
    {"_mlayernetwork_rcpp_simulate_ml", (DL_FUNC) &_mlayernetwork_rcpp_simulate_ml, 10},
    {"_mlayernetwork_rcpp_simulate_ml_suffstats", (DL_FUNC) &_mlayernetwork_rcpp_simulate_ml_suffstats, 10},
    {"_mlayernetwork_rcpp_exact_simulate_ml", (DL_FUNC) &_mlayernetwork_rcpp_exact_simulate_ml, 9},
    {"_mlayernetwork_rcpparma_hello_world", (DL_FUNC) &_mlayernetwork_rcpparma_hello_world, 0},
    {"_mlayernetwork_rcpparma_outerproduct", (DL_FUNC) &_mlayernetwork_rcpparma_outerproduct, 1},
    {"_mlayernetwork_rcpparma_innerproduct", (DL_FUNC) &_mlayernetwork_rcpparma_innerproduct, 1},
    {"_mlayernetwork_rcpparma_bothproducts", (DL_FUNC) &_mlayernetwork_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mlayernetwork(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
